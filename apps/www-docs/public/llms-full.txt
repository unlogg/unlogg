# Overview
URL: /unlogg-docs

Unlogg documentation

Welcome to the docs!

<Callout title="Work in progress">
  The docs are a work in progress, so please bear with us as we continue to improve them.
  More cooming soon!
</Callout>


# useBoolean
URL: /unlogg-hooks/hooks/use-boolean

A custom React hook to manage boolean state with toggle functionality.

<ComponentPreview name="use-boolean-ex-01" classNameComponentContainer="min-h-[200px]" />

## Install

<ComponentInstall name="use-boolean" classNameComponentContainer="min-h-[200px]">
  <CLIInstall name="use-boolean" />

  <ManualInstall>
    <Steps>
      <Step>
        Copy and paste the following code into your project
      </Step>

      <ComponentSource name="use-boolean" />

      <Step>
        Update the import paths to match your project setup
      </Step>
    </Steps>
  </ManualInstall>
</ComponentInstall>


# useToggle
URL: /unlogg-hooks/hooks/use-toggle

A custom React hook to toggle between given values.

<ComponentPreview name="use-toggle-ex-01" classNameComponentContainer="min-h-[200px]" />

## Install

<ComponentInstall name="use-toggle" classNameComponentContainer="min-h-[200px]">
  <CLIInstall name="use-toggle" />

  <ManualInstall>
    <Steps>
      <Step>
        Copy and paste the following code into your project
      </Step>

      <ComponentSource name="use-toggle" />

      <Step>
        Update the import paths to match your project setup
      </Step>
    </Steps>
  </ManualInstall>
</ComponentInstall>


# Overview
URL: /unlogg-hooks

A collection of reusable hooks for building dashboard and web apps.

## What are unlogg/hooks?

**unlogg/hooks** is a collection of reusable hooks for building dashboard and web apps. Itâ€™s a great way to speed up your development process and create a consistent look and feel across your site.

## How are the hooks built?

All the hooks are built with `React` and are designed to be easy to use and customize. Theyâ€™re built with TypeScript, so you get all the benefits of type safety and autocompletion in your IDE.

## Can I customize the hooks?

YES! You can customize the hooks however you like!

Since this is a "copy-paste" library, you can easily copy the hooks' code and paste it into your project (or install via the CLI). You can then modify the code to fit your needs, or use the hooks as a starting point for building your own.

## License

**unlogg/hooks** is licensed under the MIT License. You are free to use it in personal and commercial projects. If you find it useful, please consider giving back by contributing to the project or spreading the word.

For more info see the [LICENSE](https://github.com/unlogg/blob/main/LICENSE) file.

## FAQ

<Accordions>
  <Accordion title="Can I use this in my project?">
    Definitely! **unlogg/hooks** is free for personal and commercial projects.
    For more info see the [LICENSE](https://github.com/unlogg/blob/main/LICENSE) file.
  </Accordion>

  <Accordion title="Is this project ready to use?">
    Almost! Weâ€™re constantly adding new hooks and improving existing ones.
    You can of course use whatâ€™s here now, but be aware that things might change a little bit.
  </Accordion>

  <Accordion title="Can I contribute?">
    Yes, we'd love your help! You can open an issue or submit a pull request on our GitHub repository.

    Check [CONTRIBUTING.md](https://github.com/unlogg/blob/main/CONTRIBUTING.md) for more information on how to contribute.
  </Accordion>
</Accordions>


# Installation
URL: /unlogg-hooks/installation

How to use unlogg/hooks in your project

**No installation is required!  ðŸŽ‰**

Since this is a "copy-paste" collection of hooks, you can easily copy the components' code and paste it into your project

You can then modify the code to fit your needs, or use the components as a starting point for building your own.

If you want, you can use the [CLI](/docs/unlogg-ui/cli) to quickly add hooks to your projects.
(This is the same guide and CLI we use for `unlogg/ui`)


# CLI
URL: /unlogg-ui/cli

Use the CLI to add components, blocks and pages to your project.

<Callout>
  We rely on `shadcn` CLI to add components and blocks to your project.
</Callout>

The CLI provides an easy, interactive way to add components, blocks and pages to your project.
Installing components using the CLI ensures that you have the latest version of the component and its dependencies.

## `init` command

You can use the `init` command to initialize configuration and dependencies for a new project.

The `init` command installs dependencies, adds the `cn` util and configures CSS variables for the project.

<Tabs items={["pnpm", "npm", "bun"]}>
  ```bash tab="pnpm"
  pnpm dlx shadcn@latest init
  ```

  ```bash tab="npm"
  npx shadcn@latest init
  ```

  ```bash tab="bun"
  bun x --bun shadcn@latest init
  ```
</Tabs>

You will be asked a few questions to initialize the project.

## `add` command

You can use the `add` command to add components, blocks and pages to your project.

The `add` command installs dependencies, adds the component, block or page to your project and updates the configuration.

<Tabs items={["pnpm", "npm", "bun"]}>
  ```bash tab="pnpm"
  pnpm dlx shadcn@latest add https://unlogg.com/r/product-card-01-block.json
  ```

  ```bash tab="npm"
  npx shadcn@latest add https://unlogg.com/r/product-card-01-block.json
  ```

  ```bash tab="bun"
  bun x --bun shadcn@latest add https://unlogg.com/r/product-card-01-block.json
  ```
</Tabs>

You can use the same command to add shadcn/ui components.

To see a list of all available options, please refer to the [shadcn/ui documentation](https://ui.shadcn.com/docs/cli).

## Monorepo support

If you need to install the components in a monorepo, you can use the optional `-c` flag.
This will allow you to specify the path to the project where you want to install the component.

<Tabs items={["pnpm", "npm", "bun"]}>
  ```bash tab="pnpm"
  pnpm dlx shadcn@latest add https://unlogg.com/r/product-card-01-block.json -c ./apps/www
  ```

  ```bash tab="npm"
  npx shadcn@latest add https://unlogg.com/r/product-card-01-block.json -c ./apps/www
  ```

  ```bash tab="bun"
  bun x --bun shadcn@latest add https://unlogg.com/r/product-card-01-block.json -c ./apps/www
  ```
</Tabs>

Read more about monorepo support using the `shadcn` CLI in the [shadcn/ui documentation](https://ui.shadcn.com/docs/monorepo).


# Test
URL: /unlogg-ui/components/test

A test component for Unlogg UI

<ComponentPreview name="test-ex-01" classNameComponentContainer="min-h-[200px]" />

## Install

<ComponentInstall name="test-component" classNameComponentContainer="min-h-[200px]">
  <CLIInstall name="test-component" />

  <ManualInstall>
    <Steps>
      <Step>
        Copy and paste the following code into your project
      </Step>

      <ComponentSource name="test-component" />

      <Step>
        Update the import paths to match your project setup
      </Step>
    </Steps>
  </ManualInstall>
</ComponentInstall>


# Overview
URL: /unlogg-ui

Build dashboard and web apps faster than ever

## What is unlogg/ui?

**unlogg/ui** is a collection of reusable components and design patterns for building dashboard and web apps. Itâ€™s a great way to speed up your design process and create a consistent look and feel across your site.

## How are the components built?

All the components and block are built with `React` and styled with `Tailwind CSS`. This makes it easy to customize the look and feel of the components to match your brand.

Some of the components and blocks also implement `shadcn/ui` components and design patterns (e.g.: global styles, typography, spacing, etc).

## Can I customize the components?

YES! You can customize the components however you like!

Since this is a "copy-paste" library, you can easily copy the components' code and paste it into your project (or install via the CLI). You can then modify the code to fit your needs, or use the components as a starting point for building your own.

## Project structures

The library is made of `components` and `blocks`.

### Components

Components are small, self-contained pieces of UI that can be used in multiple places across your site. Theyâ€™re designed to be flexible and easy to customize. You can use `components` to build larger `blocks` or use them on their own.

### Blocks

Blocks are larger pieces of UI that are normally made up of multiple components. Theyâ€™re designed to be used in specific contexts, like a product page or a checkout flow. You can use `blocks` to build entire pages or sections of your site.

## License

**unlogg/ui** is licensed under the MIT License. You are free to use it in personal and commercial projects. If you find it useful, please consider giving back by contributing to the project or spreading the word.

For more info see the [LICENSE](https://github.com/unlogg/blob/main/LICENSE) file.

## FAQ

<Accordions>
  <Accordion title="Can I use this in my project?">
    Definitely! **unlogg/ui** is free for personal and commercial projects.
    For more info see the [LICENSE](https://github.com/unlogg/blob/main/LICENSE) file.
  </Accordion>

  <Accordion title="Is this project ready to use?">
    Almost! Weâ€™re constantly adding new components and improving existing ones.
    You can of course use whatâ€™s here now, but be aware that things might change a little bit.
  </Accordion>

  <Accordion title="Can I contribute?">
    Yes, we'd love your help! You can open an issue or submit a pull request on our GitHub repository.

    Check [CONTRIBUTING.md](https://github.com/unlogg/blob/main/CONTRIBUTING.md) for more information on how to contribute.
  </Accordion>
</Accordions>


# Installation
URL: /unlogg-ui/installation

A simple guide to set up commerce ui with the required dependencies and structure.

This project is built with **Next.js**, using **TypeScript** and **Tailwind CSS** for all components.

##

<Steps>
  <Step>
    ### Install Tailwind CSS

    The components are styled using **Tailwind CSS v.4**.

    Follow the official [installation guide](https://tailwindcss.com/docs/installation) to set it up in your project. If you are still using Tailwind CSS v.3, you can follow the [Tailwindcss v.4 migration guide](https://tailwindcss.com/docs/upgrade-guide).
  </Step>

  <Step>
    ### Install `lucide-react` icons

    For the components that use icons, we use **Lucide React** icons.

    <Tabs items={['npm', 'pnpm', 'bun']}>
      ```bash tab="npm"
      npm install lucide-react
      ```

      ```bash tab="pnpm"
      pnpm add lucide-react
      ```

      ```bash tab="bun"
      bun add lucide-react
      ```
    </Tabs>
  </Step>

  <Step>
    ### Add a Utility Helper

    To make it easier to conditionally apply Tailwind CSS classes, add this `cn` helper function to your project.

    ```ts title="lib/utils.ts"
    import { clsx, type ClassValue } from 'clsx'
    import { twMerge } from 'tailwind-merge'

    export function cn(...inputs: ClassValue[]) {
      return twMerge(clsx(inputs))
    }
    ```

    You might need to install the `clsx` and `tailwind-merge` packages.

    <Tabs items={['npm', 'pnpm', 'bun']}>
      ```bash tab="npm"
      npm install clsx tailwind-merge
      ```

      ```bash tab="pnpm"
      pnpm add clsx tailwind-merge
      ```

      ```bash tab="bun"
      bun add clsx tailwind-merge
      ```
    </Tabs>
  </Step>

  <Step>
    ### Add your first component

    Now that you have set up the required dependencies, you can start adding components to your project.

    For example, to add the `StarRating` component, you can just:

    <Tabs items={['pnpm', 'npm','bun']}>
      ```bash tab="pnpm"
      pnpm shadcn@latest add https://unlogg.com/r/star-rating-basic-ex-01.json
      ```

      ```bash tab="npm"
      npx shadcn@latest add https://unlogg.com/r/star-rating-basic-ex-01.json
      ```

      ```bash tab="bun"
      bun shadcn@latest add https://unlogg.com/r/star-rating-basic-ex-01.json
      ```
    </Tabs>

    And then import the component in your project like:

    ```ts title="layouts/review.tsx"
    "use client";

    import StarRatingBasic from "@/components/unlogg-ui/test";
    import { useState } from "react";

    export default function Rating() {
      const [rating, setRating] = useState(3);
      return (
        <div className="flex flex-row items-center gap-4">
          <StarRatingBasic value={rating} onChange={setRating} maxStars={5} />
          <p>({rating})</p>
           {/* Rest of your code... */}
        </div>
      );
    }
    ```

    <Step>
      ## Done! ðŸŽ‰

      You can now manually *copy-paste* the components or use the [CLI](/docs/cli) to add components, blocks, and pages to your project.

      Some components also rely on other third-party libraries like [shadcn/ui](https://ui.shadcn.com/docs/installation) and [Motion](https://motion.dev). These dependencies are specified in the component documentation.

      <Callout title="We recommend using the CLI">
        If you are using the CLI to add components, you don't need to worry about the dependencies. The CLI will take care of installing them for you. See the [CLI documentation](/docs/cli) for more information.
      </Callout>
    </Step>
  </Step>
</Steps>


# Another
URL: /unlogg-ui/test/another

Use the CLI to add components, blocks and pages to your project.

Hello world!


# CLI
URL: /unlogg-ui/test/cli

Use the CLI to add components, blocks and pages to your project.

<Callout>
  We rely on `shadcn` CLI to add components and blocks to your project.
</Callout>

The CLI provides an easy, interactive way to add components, blocks and pages to your project.
Installing components using the CLI ensures that you have the latest version of the component and its dependencies.

## `init` command

You can use the `init` command to initialize configuration and dependencies for a new project.

The `init` command installs dependencies, adds the `cn` util and configures CSS variables for the project.

<Tabs items={["pnpm", "npm", "bun"]}>
  ```bash tab="pnpm"
  pnpm dlx shadcn@latest init
  ```

  ```bash tab="npm"
  npx shadcn@latest init
  ```

  ```bash tab="bun"
  bun x --bun shadcn@latest init
  ```
</Tabs>

You will be asked a few questions to initialize the project.

## `add` command

You can use the `add` command to add components, blocks and pages to your project.

The `add` command installs dependencies, adds the component, block or page to your project and updates the configuration.

<Tabs items={["pnpm", "npm", "bun"]}>
  ```bash tab="pnpm"
  pnpm dlx shadcn@latest add https://unlogg.com/r/product-card-01-block.json
  ```

  ```bash tab="npm"
  npx shadcn@latest add https://unlogg.com/r/product-card-01-block.json
  ```

  ```bash tab="bun"
  bun x --bun shadcn@latest add https://unlogg.com/r/product-card-01-block.json
  ```
</Tabs>

You can use the same command to add shadcn/ui components.

To see a list of all available options, please refer to the [shadcn/ui documentation](https://ui.shadcn.com/docs/cli).

## Monorepo support

If you need to install the components in a monorepo, you can use the optional `-c` flag.
This will allow you to specify the path to the project where you want to install the component.

<Tabs items={["pnpm", "npm", "bun"]}>
  ```bash tab="pnpm"
  pnpm dlx shadcn@latest add https://unlogg.com/r/product-card-01-block.json -c ./apps/www
  ```

  ```bash tab="npm"
  npx shadcn@latest add https://unlogg.com/r/product-card-01-block.json -c ./apps/www
  ```

  ```bash tab="bun"
  bun x --bun shadcn@latest add https://unlogg.com/r/product-card-01-block.json -c ./apps/www
  ```
</Tabs>

Read more about monorepo support using the `shadcn` CLI in the [shadcn/ui documentation](https://ui.shadcn.com/docs/monorepo).


# CLI
URL: /unlogg-ui/test

Use the CLI to add components, blocks and pages to your project.

<Callout>
  We rely on `shadcn` CLI to add components and blocks to your project.
</Callout>

The CLI provides an easy, interactive way to add components, blocks and pages to your project.
Installing components using the CLI ensures that you have the latest version of the component and its dependencies.

## `init` command

You can use the `init` command to initialize configuration and dependencies for a new project.

The `init` command installs dependencies, adds the `cn` util and configures CSS variables for the project.

<Tabs items={["pnpm", "npm", "bun"]}>
  ```bash tab="pnpm"
  pnpm dlx shadcn@latest init
  ```

  ```bash tab="npm"
  npx shadcn@latest init
  ```

  ```bash tab="bun"
  bun x --bun shadcn@latest init
  ```
</Tabs>

You will be asked a few questions to initialize the project.

## `add` command

You can use the `add` command to add components, blocks and pages to your project.

The `add` command installs dependencies, adds the component, block or page to your project and updates the configuration.

<Tabs items={["pnpm", "npm", "bun"]}>
  ```bash tab="pnpm"
  pnpm dlx shadcn@latest add https://unlogg.com/r/product-card-01-block.json
  ```

  ```bash tab="npm"
  npx shadcn@latest add https://unlogg.com/r/product-card-01-block.json
  ```

  ```bash tab="bun"
  bun x --bun shadcn@latest add https://unlogg.com/r/product-card-01-block.json
  ```
</Tabs>

You can use the same command to add shadcn/ui components.

To see a list of all available options, please refer to the [shadcn/ui documentation](https://ui.shadcn.com/docs/cli).

## Monorepo support

If you need to install the components in a monorepo, you can use the optional `-c` flag.
This will allow you to specify the path to the project where you want to install the component.

<Tabs items={["pnpm", "npm", "bun"]}>
  ```bash tab="pnpm"
  pnpm dlx shadcn@latest add https://unlogg.com/r/product-card-01-block.json -c ./apps/www
  ```

  ```bash tab="npm"
  npx shadcn@latest add https://unlogg.com/r/product-card-01-block.json -c ./apps/www
  ```

  ```bash tab="bun"
  bun x --bun shadcn@latest add https://unlogg.com/r/product-card-01-block.json -c ./apps/www
  ```
</Tabs>

Read more about monorepo support using the `shadcn` CLI in the [shadcn/ui documentation](https://ui.shadcn.com/docs/monorepo).
