{
  "name": "use-scroll-into-view-ex-02",
  "type": "registry:example",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://unlogg.com/r/use-scroll-into-view.json",
    "badge",
    "button",
    "card"
  ],
  "files": [
    {
      "type": "registry:example",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useScrollIntoView } from \"@/hooks/use-scroll-into-view\";\nimport * as React from \"react\";\n\nexport default function UseScrollIntoView_Ex_01() {\n  return (\n    <div>\n      {/* Advanced example */}\n      <Card className=\"bg-background mx-auto w-full max-w-2xl p-6\">\n        <h4 className=\"text-md mb-4 text-center font-semibold\">\n          Advanced Navigation\n        </h4>\n        <NavigationDemo />\n      </Card>\n    </div>\n  );\n}\n\nfunction NavigationDemo() {\n  const sections = [\n    { id: \"intro\", title: \"Introduction\", color: \"blue\" },\n    { id: \"features\", title: \"Features\", color: \"green\" },\n    { id: \"usage\", title: \"Usage\", color: \"purple\" },\n    { id: \"conclusion\", title: \"Conclusion\", color: \"orange\" },\n  ];\n\n  const refs = React.useRef<Record<string, React.RefObject<HTMLDivElement>>>(\n    {}\n  );\n  const scrollers = React.useRef<Record<string, any>>({});\n\n  // Use individual hooks for each section\n  const [introRef, { scrollIntoView: scrollToIntro }] =\n    useScrollIntoView<HTMLDivElement>();\n  const [featuresRef, { scrollIntoView: scrollToFeatures }] =\n    useScrollIntoView<HTMLDivElement>();\n  const [usageRef, { scrollIntoView: scrollToUsage }] =\n    useScrollIntoView<HTMLDivElement>();\n  const [conclusionRef, { scrollIntoView: scrollToConclusion }] =\n    useScrollIntoView<HTMLDivElement>();\n\n  const sectionRefs = {\n    intro: introRef,\n    features: featuresRef,\n    usage: usageRef,\n    conclusion: conclusionRef,\n  };\n\n  const sectionScrollers = {\n    intro: scrollToIntro,\n    features: scrollToFeatures,\n    usage: scrollToUsage,\n    conclusion: scrollToConclusion,\n  };\n\n  return (\n    <div className=\"bg-background space-y-4\">\n      {/* Navigation */}\n      <div className=\"bg-card flex flex-wrap justify-center gap-2 rounded-lg p-4\">\n        {sections.map((section) => (\n          <Button\n            key={section.id}\n            onClick={() =>\n              sectionScrollers[section.id as keyof typeof sectionScrollers]()\n            }\n            variant=\"outline\"\n            size=\"sm\"\n          >\n            {section.title}\n          </Button>\n        ))}\n      </div>\n\n      {/* Content sections */}\n      <div className=\"h-64 overflow-y-auto rounded-lg border\">\n        <div className=\"space-y-8 p-4\">\n          <div\n            ref={introRef}\n            className=\"rounded border border-blue-200 bg-blue-50 p-4\"\n          >\n            <h5 className=\"mb-2 font-semibold text-blue-800\">Introduction</h5>\n            <p className=\"text-sm text-blue-700\">\n              Welcome to our advanced navigation demo. This section demonstrates\n              how to create smooth scrolling navigation with multiple targets.\n            </p>\n            {Array.from({ length: 3 }, (_, i) => (\n              <p key={i} className=\"mt-2 text-xs text-blue-600\">\n                Introduction content line {i + 1}\n              </p>\n            ))}\n          </div>\n\n          <div\n            ref={featuresRef}\n            className=\"rounded border border-green-200 bg-green-50 p-4\"\n          >\n            <h5 className=\"mb-2 font-semibold text-green-800\">Features</h5>\n            <p className=\"text-sm text-green-700\">\n              Our scroll hook provides smooth animations, respects user\n              preferences, and works with any scrollable container.\n            </p>\n            {Array.from({ length: 4 }, (_, i) => (\n              <p key={i} className=\"mt-2 text-xs text-green-600\">\n                Feature description {i + 1}\n              </p>\n            ))}\n          </div>\n\n          <div\n            ref={usageRef}\n            className=\"rounded border border-purple-200 bg-purple-50 p-4\"\n          >\n            <h5 className=\"mb-2 font-semibold text-purple-800\">Usage</h5>\n            <p className=\"text-sm text-purple-700\">\n              Simply create refs for your target elements and use the scroll\n              functions to navigate between them smoothly.\n            </p>\n            {Array.from({ length: 5 }, (_, i) => (\n              <p key={i} className=\"mt-2 text-xs text-purple-600\">\n                Usage example {i + 1}\n              </p>\n            ))}\n          </div>\n\n          <div\n            ref={conclusionRef}\n            className=\"rounded border border-orange-200 bg-orange-50 p-4\"\n          >\n            <h5 className=\"mb-2 font-semibold text-orange-800\">Conclusion</h5>\n            <p className=\"text-sm text-orange-700\">\n              The useScrollIntoView hook makes it easy to create engaging,\n              accessible navigation experiences in your React applications.\n            </p>\n            {Array.from({ length: 3 }, (_, i) => (\n              <p key={i} className=\"mt-2 text-xs text-orange-600\">\n                Conclusion point {i + 1}\n              </p>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-scroll-into-view-ex-02.tsx",
      "target": "/components/unlogg-ui/use-scroll-into-view-ex-02.tsx"
    }
  ]
}