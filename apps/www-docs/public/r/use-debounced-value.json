{
  "name": "use-debounced-value",
  "type": "registry:hook",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:hook",
      "content": "\"use client\";\n\nimport { useState, useEffect, useCallback } from \"react\";\n\ntype UseDebouncedValueOptions = {\n  onDebounce?: (value: any) => void;\n};\n\ntype UseDebouncedValueHandlers<T> = {\n  setValue: (val: T) => void;\n};\n\n/**\n * Custom React hook that returns a debounced value and a handler to update it.\n *\n * @template T The type of the value being debounced.\n * @param initialValue - The initial value to be debounced.\n * @param delay - The debounce delay in milliseconds.\n * @param options - Optional configuration object.\n * @param options.onDebounce - Optional callback invoked with the debounced value after the delay.\n * @returns A tuple containing the debounced value and an object with a `setValue` handler to update the value.\n *\n * @example\n * const [debouncedValue, { setValue }] = useDebouncedValue(inputValue, 300);\n */\nfunction useDebouncedValue<T>(\n  initialValue: T,\n  delay: number,\n  options: UseDebouncedValueOptions = {}\n): [T, UseDebouncedValueHandlers<T>] {\n  const [internalValue, setInternalValue] = useState<T>(initialValue);\n  const [debouncedValue, setDebouncedValue] = useState<T>(initialValue);\n\n  useEffect(() => {\n    setInternalValue(initialValue);\n    setDebouncedValue(initialValue);\n  }, [initialValue]);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(internalValue);\n      options.onDebounce?.(internalValue);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [internalValue, delay, options.onDebounce]);\n\n  const setValue = useCallback((val: T) => {\n    setInternalValue(val);\n  }, []);\n\n  return [debouncedValue, { setValue }];\n}\n\nexport { useDebouncedValue };\nexport type { UseDebouncedValueOptions, UseDebouncedValueHandlers };\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-debounced-value.ts",
      "target": "/hooks/use-debounce-value.ts"
    }
  ]
}