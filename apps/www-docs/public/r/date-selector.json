{
  "name": "date-selector",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "chrono-node"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as chrono from \"chrono-node\";\nimport { ChevronDownIcon, CalendarIcon, ClockIcon } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@unlogg/ui/lib/utils\";\n\ntype DatePreset = {\n  value: string;\n  label: string;\n  description?: string;\n  getDate: () => Date;\n};\n\nconst defaultPresets: DatePreset[] = [\n  {\n    value: \"1-hour\",\n    label: \"In 1 hour\",\n    description: \"1 hour from now\",\n    getDate: () => new Date(Date.now() + 60 * 60 * 1000),\n  },\n  {\n    value: \"1-day\",\n    label: \"In 1 day\",\n    description: \"24 hours from now\",\n    getDate: () => new Date(Date.now() + 24 * 60 * 60 * 1000),\n  },\n  {\n    value: \"7-days\",\n    label: \"In 7 days\",\n    description: \"1 week from now\",\n    getDate: () => new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n  },\n  {\n    value: \"30-days\",\n    label: \"In 30 days\",\n    description: \"1 month from now\",\n    getDate: () => new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n  },\n];\n\ntype DateSelectorProps = {\n  presets?: DatePreset[];\n  value?: Date | null;\n  onValueChange?: (value: Date | null) => void;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  className?: string;\n  disabled?: boolean;\n  showRelativeTime?: boolean;\n};\n\nfunction DateSelector({\n  presets = defaultPresets,\n  value,\n  onValueChange,\n  placeholder = \"Select date\",\n  searchPlaceholder = \"Type a date or time...\",\n  className = \"w-[200px]\",\n  disabled = false,\n  showRelativeTime = false,\n}: DateSelectorProps) {\n  const [open, setOpen] = React.useState(false);\n  const [selectedDate, setSelectedDate] = React.useState<Date | null>(\n    value || null\n  );\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [parsedDate, setParsedDate] = React.useState<Date | null>(null);\n  const [showCustomDatePicker, setShowCustomDatePicker] = React.useState(false);\n  const [customDate, setCustomDate] = React.useState<Date | undefined>(\n    undefined\n  );\n  const [customTime, setCustomTime] = React.useState<string>(\"12:00\");\n\n  // Use controlled value if provided, otherwise use internal state\n  const currentValue = value !== undefined ? value : selectedDate;\n\n  // Parse natural language input\n  React.useEffect(() => {\n    if (inputValue.trim()) {\n      try {\n        const parsed = chrono.parseDate(inputValue, new Date(), {\n          forwardDate: true,\n        });\n        if (parsed && parsed > new Date()) {\n          setParsedDate(parsed);\n        } else {\n          setParsedDate(null);\n        }\n      } catch {\n        setParsedDate(null);\n      }\n    } else {\n      setParsedDate(null);\n    }\n  }, [inputValue]);\n\n  const handleSelect = (selectedValue: string) => {\n    let newDate: Date | null = null;\n\n    if (selectedValue === \"parsed-date\" && parsedDate) {\n      newDate = parsedDate;\n    } else if (selectedValue === \"custom-date\") {\n      setShowCustomDatePicker(true);\n      return; // Don't close the popover yet\n    } else {\n      const preset = presets.find((preset) => preset.value === selectedValue);\n      if (preset) {\n        newDate = preset.getDate();\n      }\n    }\n\n    if (value === undefined) {\n      setSelectedDate(newDate);\n    }\n\n    onValueChange?.(newDate);\n    setOpen(false);\n    setInputValue(\"\");\n    setParsedDate(null);\n  };\n\n  const handleCustomDateSelect = () => {\n    if (customDate) {\n      // Combine the selected date with the time\n      const [hours, minutes] = customTime.split(\":\").map(Number);\n      const combinedDate = new Date(customDate);\n      combinedDate.setHours(hours, minutes, 0, 0);\n\n      // Ensure the date is in the future\n      if (combinedDate > new Date()) {\n        if (value === undefined) {\n          setSelectedDate(combinedDate);\n        }\n        onValueChange?.(combinedDate);\n      }\n    }\n\n    // Reset custom date picker state\n    setShowCustomDatePicker(false);\n    setCustomDate(undefined);\n    setCustomTime(\"12:00\");\n    setOpen(false);\n    setInputValue(\"\");\n    setParsedDate(null);\n  };\n\n  const handleCancelCustomDate = () => {\n    setShowCustomDatePicker(false);\n    setCustomDate(undefined);\n    setCustomTime(\"12:00\");\n  };\n\n  const handleClear = () => {\n    if (value === undefined) {\n      setSelectedDate(null);\n    }\n    onValueChange?.(null);\n    setOpen(false);\n    setInputValue(\"\");\n    setParsedDate(null);\n  };\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat(\"en-US\", {\n      month: \"short\",\n      day: \"numeric\",\n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    }).format(date);\n  };\n\n  const formatRelativeTime = (date: Date) => {\n    const now = new Date();\n    const diffMs = date.getTime() - now.getTime();\n    const diffMinutes = Math.round(diffMs / (1000 * 60));\n    const diffHours = Math.round(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.round(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffMinutes < 60) {\n      return `in ${diffMinutes} minute${diffMinutes !== 1 ? \"s\" : \"\"}`;\n    } else if (diffHours < 24) {\n      return `in ${diffHours} hour${diffHours !== 1 ? \"s\" : \"\"}`;\n    } else if (diffDays < 7) {\n      return `in ${diffDays} day${diffDays !== 1 ? \"s\" : \"\"}`;\n    } else {\n      return `in ${Math.round(diffDays / 7)} week${Math.round(diffDays / 7) !== 1 ? \"s\" : \"\"}`;\n    }\n  };\n\n  const filteredPresets = presets.filter(\n    (preset) =>\n      preset.label.toLowerCase().includes(inputValue.toLowerCase()) ||\n      preset.description?.toLowerCase().includes(inputValue.toLowerCase())\n  );\n\n  return (\n    <div className=\"flex items-center space-x-4\">\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outlineSecondary\"\n            className={cn(\n              `justify-start ${className}`,\n              !currentValue && \"text-muted-foreground\",\n              disabled && \"cursor-not-allowed opacity-50\"\n            )}\n            disabled={disabled}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {currentValue ? (\n              <div className=\"flex flex-col items-start\">\n                {showRelativeTime ? (\n                  <span className=\"text-muted-foreground text-xs\">\n                    {formatRelativeTime(currentValue)}\n                  </span>\n                ) : (\n                  <span className=\"text-sm font-medium\">\n                    {formatDate(currentValue)}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <span>{placeholder}</span>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"p-0\" side=\"right\" align=\"start\">\n          <Command shouldFilter={false}>\n            {!showCustomDatePicker ? (\n              <>\n                <CommandInput\n                  placeholder={searchPlaceholder}\n                  value={inputValue}\n                  onValueChange={setInputValue}\n                />\n                <CommandList>\n                  {filteredPresets.length === 0 && !parsedDate && (\n                    <CommandEmpty>\n                      Try typing something like \"in 2 hours\" or \"tomorrow at\n                      3pm\"\n                    </CommandEmpty>\n                  )}\n\n                  {parsedDate && (\n                    <CommandGroup heading=\"Parsed Date\">\n                      <CommandItem\n                        key=\"parsed-date\"\n                        value=\"parsed-date\"\n                        onSelect={handleSelect}\n                        className=\"flex items-start gap-2\"\n                      >\n                        <ClockIcon className=\"text-primary mt-1 h-4 w-4 flex-shrink-0\" />\n                        <div className=\"flex flex-col\">\n                          <span className=\"font-bold\">\n                            {formatDate(parsedDate)}\n                          </span>\n                          <span className=\"text-muted-foreground text-xs\">\n                            {formatRelativeTime(parsedDate)}\n                          </span>\n                        </div>\n                      </CommandItem>\n                    </CommandGroup>\n                  )}\n\n                  <CommandGroup heading=\"Quick Options\">\n                    {filteredPresets.map((preset) => {\n                      const date = preset.getDate();\n                      return (\n                        <CommandItem\n                          key={preset.value}\n                          value={preset.value}\n                          onSelect={handleSelect}\n                          className=\"flex items-start gap-2\"\n                        >\n                          <CalendarIcon className=\"mt-1 h-4 w-4 flex-shrink-0\" />\n                          <div className=\"flex flex-col\">\n                            <span>{preset.label}</span>\n                            <span className=\"text-muted-foreground text-xs\">\n                              {formatDate(date)}\n                            </span>\n                          </div>\n                        </CommandItem>\n                      );\n                    })}\n\n                    <CommandItem\n                      key=\"custom-date\"\n                      value=\"custom-date\"\n                      onSelect={handleSelect}\n                      className=\"flex items-start gap-2\"\n                    >\n                      <CalendarIcon className=\"mt-1 h-4 w-4 flex-shrink-0\" />\n                      <div className=\"flex flex-col\">\n                        <span>Custom date & time</span>\n                        <span className=\"text-muted-foreground text-xs\">\n                          Pick a specific date and time\n                        </span>\n                      </div>\n                    </CommandItem>\n                  </CommandGroup>\n\n                  {currentValue && (\n                    <CommandGroup>\n                      <CommandItem\n                        key=\"clear\"\n                        onSelect={handleClear}\n                        className=\"text-muted-foreground\"\n                      >\n                        Clear selection\n                      </CommandItem>\n                    </CommandGroup>\n                  )}\n                </CommandList>\n              </>\n            ) : (\n              <div className=\"space-y-4 p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium\">Custom Date & Time</h4>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleCancelCustomDate}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div>\n                    <Calendar\n                      mode=\"single\"\n                      selected={customDate}\n                      onSelect={setCustomDate}\n                      disabled={(date) => date < new Date()}\n                      className=\"mx-auto flex items-start p-0\"\n                      captionLayout=\"dropdown-years\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"custom-time-picker\" className=\"text-sm\">\n                      Time\n                    </Label>\n                    <Input\n                      type=\"time\"\n                      id=\"custom-time-picker\"\n                      value={customTime}\n                      onChange={(e) => setCustomTime(e.target.value)}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={handleCustomDateSelect}\n                    disabled={!customDate}\n                    className=\"flex-1\"\n                  >\n                    Set Date\n                  </Button>\n                </div>\n              </div>\n            )}\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n\nexport default DateSelector;\nexport type { DateSelectorProps };\n",
      "path": "/../../packages/ui/src/components/unlogg-ui/date-selector/date-selector.tsx",
      "target": "/components/unlogg-ui/date-selector.tsx"
    }
  ]
}