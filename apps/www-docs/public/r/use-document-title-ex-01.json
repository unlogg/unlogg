{
  "name": "use-document-title-ex-01",
  "type": "registry:example",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://unlogg.com/r/use-document-title.json"
  ],
  "files": [
    {
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Card } from \"@/hooks/card\";\nimport { Button } from \"@/hooks/button\";\nimport { Badge } from \"@/hooks/badge\";\nimport { Input } from \"@/hooks/input\";\nimport { useDocumentTitle } from \"@/hooks/use-document-title\";\n\nexport default function UseDocumentTitle_Ex_01() {\n  const [customTitle, setCustomTitle] = React.useState(\"Custom Page Title\");\n  const [isActive, setIsActive] = React.useState(false);\n  const [counter, setCounter] = React.useState(0);\n  const [currentTime, setCurrentTime] = React.useState(\"\");\n\n  // Update time every second\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date().toLocaleTimeString());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Basic title setting\n  useDocumentTitle(isActive ? customTitle : null);\n\n  return (\n    <div className=\"flex flex-col gap-6 p-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold mb-2\">Document Title Hook</h3>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          Dynamically set and manage the document title (check your browser\n          tab!)\n        </p>\n\n        <div className=\"flex items-center justify-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-medium\">Title Active:</span>\n            <Badge variant={isActive ? \"default\" : \"secondary\"}>\n              {isActive ? \"Yes\" : \"No\"}\n            </Badge>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-medium\">Current Time:</span>\n            <Badge variant=\"outline\" className=\"font-mono\">\n              {currentTime}\n            </Badge>\n          </div>\n        </div>\n      </div>\n\n      {/* Basic Usage */}\n      <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Basic Usage</h4>\n        <div className=\"space-y-4\">\n          <div className=\"flex gap-2\">\n            <Input\n              value={customTitle}\n              onChange={(e) => setCustomTitle(e.target.value)}\n              placeholder=\"Enter document title...\"\n              className=\"flex-1\"\n            />\n            <Button\n              onClick={() => setIsActive(!isActive)}\n              variant={isActive ? \"default\" : \"outline\"}\n            >\n              {isActive ? \"Deactivate\" : \"Activate\"} Title\n            </Button>\n          </div>\n\n          <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n            <p className=\"text-sm text-blue-700\">\n              <strong>Current document title:</strong>{\" \"}\n              {isActive ? customTitle : \"Original title\"}\n            </p>\n            <p className=\"text-xs text-blue-600 mt-1\">\n              Look at your browser tab to see the title change!\n            </p>\n          </div>\n        </div>\n      </Card>\n\n      {/* Dynamic Title Examples */}\n      <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Dynamic Title Examples</h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <CounterTitleDemo />\n          <TimeTitleDemo />\n        </div>\n      </Card>\n\n      {/* Multiple Components */}\n      <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">\n          Multiple Components (Last One Wins)\n        </h4>\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <TitleComponent title=\"Component A\" color=\"red\" />\n            <TitleComponent title=\"Component B\" color=\"green\" />\n            <TitleComponent title=\"Component C\" color=\"blue\" />\n          </div>\n          <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            <p className=\"text-sm text-yellow-700\">\n              <strong>Note:</strong> When multiple components use\n              useDocumentTitle, the last one to render will set the title. This\n              demonstrates the importance of coordinating title management in\n              your application.\n            </p>\n          </div>\n        </div>\n      </Card>\n\n      {/* Restore on Unmount Example */}\n      <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Restore on Unmount</h4>\n        <RestoreOnUnmountDemo />\n      </Card>\n\n      {/* Best Practices */}\n      <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Best Practices</h4>\n        <div className=\"space-y-3 text-sm\">\n          <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n            <strong className=\"text-green-800\">✅ Do:</strong>\n            <ul className=\"list-disc list-inside text-green-700 mt-1 space-y-1\">\n              <li>Use descriptive, meaningful titles</li>\n              <li>Include page context (e.g., \"Dashboard - MyApp\")</li>\n              <li>Update titles based on content changes</li>\n              <li>Consider using restoreOnUnmount for temporary components</li>\n            </ul>\n          </div>\n\n          <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n            <strong className=\"text-red-800\">❌ Don't:</strong>\n            <ul className=\"list-disc list-inside text-red-700 mt-1 space-y-1\">\n              <li>Use this hook in server-side rendered components</li>\n              <li>Set titles too frequently (it can be distracting)</li>\n              <li>Use very long titles (they get truncated in tabs)</li>\n              <li>Forget to handle the case where title might be null</li>\n            </ul>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nfunction CounterTitleDemo() {\n  const [count, setCount] = React.useState(0);\n  const [isActive, setIsActive] = React.useState(false);\n\n  useDocumentTitle(isActive ? `Counter: ${count}` : null);\n\n  return (\n    <div className=\"p-4 bg-purple-50 border border-purple-200 rounded-lg\">\n      <h5 className=\"font-semibold text-purple-800 mb-2\">Counter Title</h5>\n      <div className=\"space-y-2\">\n        <div className=\"text-2xl font-mono font-bold text-purple-600\">\n          {count}\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={() => setCount((c) => c + 1)}\n            size=\"sm\"\n            variant=\"outline\"\n          >\n            +1\n          </Button>\n          <Button\n            onClick={() => setCount((c) => Math.max(0, c - 1))}\n            size=\"sm\"\n            variant=\"outline\"\n          >\n            -1\n          </Button>\n        </div>\n        <Button\n          onClick={() => setIsActive(!isActive)}\n          size=\"sm\"\n          variant={isActive ? \"default\" : \"secondary\"}\n          className=\"w-full\"\n        >\n          {isActive ? \"Stop\" : \"Start\"} Counter Title\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction TimeTitleDemo() {\n  const [isActive, setIsActive] = React.useState(false);\n  const [time, setTime] = React.useState(\"\");\n\n  React.useEffect(() => {\n    if (isActive) {\n      const interval = setInterval(() => {\n        setTime(new Date().toLocaleTimeString());\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [isActive]);\n\n  useDocumentTitle(isActive ? `Time: ${time}` : null);\n\n  return (\n    <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n      <h5 className=\"font-semibold text-orange-800 mb-2\">Live Time Title</h5>\n      <div className=\"space-y-2\">\n        <div className=\"text-lg font-mono font-bold text-orange-600\">\n          {time || \"Not active\"}\n        </div>\n        <Button\n          onClick={() => setIsActive(!isActive)}\n          size=\"sm\"\n          variant={isActive ? \"default\" : \"secondary\"}\n          className=\"w-full\"\n        >\n          {isActive ? \"Stop\" : \"Start\"} Time Title\n        </Button>\n      </div>\n    </div>\n  );\n}\n\ninterface TitleComponentProps {\n  title: string;\n  color: \"red\" | \"green\" | \"blue\";\n}\n\nfunction TitleComponent({ title, color }: TitleComponentProps) {\n  const [isActive, setIsActive] = React.useState(false);\n\n  useDocumentTitle(isActive ? `${title} is Active!` : null);\n\n  const colorClasses = {\n    red: \"bg-red-50 border-red-200 text-red-800\",\n    green: \"bg-green-50 border-green-200 text-green-800\",\n    blue: \"bg-blue-50 border-blue-200 text-blue-800\",\n  };\n\n  return (\n    <div className={`p-4 border rounded-lg ${colorClasses[color]}`}>\n      <h5 className=\"font-semibold mb-2\">{title}</h5>\n      <Button\n        onClick={() => setIsActive(!isActive)}\n        size=\"sm\"\n        variant={isActive ? \"default\" : \"outline\"}\n        className=\"w-full\"\n      >\n        {isActive ? \"Deactivate\" : \"Activate\"}\n      </Button>\n    </div>\n  );\n}\n\nfunction RestoreOnUnmountDemo() {\n  const [showComponent, setShowComponent] = React.useState(false);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex gap-2\">\n        <Button\n          onClick={() => setShowComponent(!showComponent)}\n          variant={showComponent ? \"destructive\" : \"default\"}\n        >\n          {showComponent ? \"Unmount\" : \"Mount\"} Temporary Component\n        </Button>\n      </div>\n\n      {showComponent && <TemporaryTitleComponent />}\n\n      <div className=\"p-3 bg-indigo-50 border border-indigo-200 rounded-lg\">\n        <p className=\"text-sm text-indigo-700\">\n          <strong>Behavior:</strong> The temporary component sets a title with\n          `restoreOnUnmount: true`. When you unmount it, the original title\n          should be restored.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction TemporaryTitleComponent() {\n  useDocumentTitle(\"🎯 Temporary Title - Will Restore on Unmount\", {\n    restoreOnUnmount: true,\n  });\n\n  return (\n    <div className=\"p-4 bg-cyan-50 border border-cyan-200 rounded-lg\">\n      <h5 className=\"font-semibold text-cyan-800 mb-2\">Temporary Component</h5>\n      <p className=\"text-sm text-cyan-700\">\n        This component sets a temporary title that will be restored when\n        unmounted.\n      </p>\n    </div>\n  );\n}\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-document-title-ex-01.tsx",
      "target": "/components/unlogg-ui/use-document-title-ex-01.tsx"
    }
  ]
}