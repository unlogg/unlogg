{
  "name": "use-clipboard-copy-ex-01",
  "type": "registry:example",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://unlogg.com/r/use-clipboard-copy.json",
    "badge",
    "button",
    "card",
    "input"
  ],
  "files": [
    {
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useClipboardCopy } from \"@/hooks/use-clipboard-copy\";\n\nexport default function UseClipboardCopy_Ex_01() {\n  const [customText, setCustomText] = React.useState(\"Hello, World!\");\n  const [logs, setLogs] = React.useState<string[]>([]);\n\n  const addLog = React.useCallback((message: string) => {\n    setLogs((prev) => [\n      `${new Date().toLocaleTimeString()}: ${message}`,\n      ...prev.slice(0, 4),\n    ]);\n  }, []);\n\n  const {\n    copied: basicCopied,\n    copy: basicCopy,\n    error: basicError,\n  } = useClipboardCopy({\n    timeout: 2000,\n    onSuccess: (text) => addLog(`Successfully copied: \"${text}\"`),\n    onError: (err) => addLog(`Copy failed: ${err.message}`),\n  });\n\n  const {\n    copied: customCopied,\n    copy: customCopy,\n    error: customError,\n    reset: customReset,\n  } = useClipboardCopy({\n    timeout: 3000,\n  });\n\n  const { copied: longTimeoutCopied, copy: longTimeoutCopy } = useClipboardCopy(\n    {\n      timeout: 5000,\n    }\n  );\n\n  const codeSnippet = `import { useClipboardCopy } from \"@/hooks/use-clipboard-copy\";\n\nfunction MyComponent() {\n  const { copy, copied } = useClipboardCopy();\n  \n  return (\n    <button onClick={() => copy(\"Hello!\")}>\n      {copied ? \"Copied!\" : \"Copy\"}\n    </button>\n  );\n}`;\n\n  return (\n    <div className=\"flex flex-col gap-6 p-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold mb-2\">Clipboard Copy Hook</h3>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          Copy text to clipboard with automatic state management and timeout\n          reset\n        </p>\n\n        <div className=\"flex items-center justify-center gap-4 flex-wrap\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-medium\">Basic Status:</span>\n            <Badge variant={basicCopied ? \"default\" : \"secondary\"}>\n              {basicCopied ? \"Copied\" : \"Ready\"}\n            </Badge>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-medium\">Custom Status:</span>\n            <Badge variant={customCopied ? \"default\" : \"secondary\"}>\n              {customCopied ? \"Copied\" : \"Ready\"}\n            </Badge>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-medium\">Long Timeout:</span>\n            <Badge variant={longTimeoutCopied ? \"default\" : \"secondary\"}>\n              {longTimeoutCopied ? \"Copied\" : \"Ready\"}\n            </Badge>\n          </div>\n        </div>\n      </div>\n\n      {/* Basic Usage */}\n      <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Basic Usage (2s timeout)</h4>\n        <div className=\"space-y-4\">\n          <div className=\"flex gap-2 flex-wrap\">\n            <Button\n              onClick={() => basicCopy(\"Hello, World!\")}\n              variant={basicCopied ? \"default\" : \"outline\"}\n            >\n              {basicCopied ? \"âœ“ Copied!\" : \"Copy Hello World\"}\n            </Button>\n            <Button\n              onClick={() =>\n                basicCopy(\n                  \"This is a longer text that demonstrates clipboard functionality\"\n                )\n              }\n              variant={basicCopied ? \"default\" : \"outline\"}\n            >\n              {basicCopied ? \"âœ“ Copied!\" : \"Copy Long Text\"}\n            </Button>\n            <Button\n              onClick={() => basicCopy(\"ðŸŽ‰ Emojis work too! ðŸš€âœ¨\")}\n              variant={basicCopied ? \"default\" : \"outline\"}\n            >\n              {basicCopied ? \"âœ“ Copied!\" : \"Copy Emojis\"}\n            </Button>\n          </div>\n\n          {basicError && (\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n              <p className=\"text-sm text-red-700\">\n                <strong>Error:</strong> {basicError.message}\n              </p>\n            </div>\n          )}\n        </div>\n      </Card>\n\n      {/* Custom Text Input */}\n      <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">\n          Custom Text (3s timeout with manual reset)\n        </h4>\n        <div className=\"space-y-4\">\n          <div className=\"flex gap-2\">\n            <Input\n              value={customText}\n              onChange={(e) => setCustomText(e.target.value)}\n              placeholder=\"Enter text to copy...\"\n              className=\"flex-1\"\n            />\n            <Button\n              onClick={() => customCopy(customText)}\n              variant={customCopied ? \"default\" : \"outline\"}\n              disabled={!customText.trim()}\n            >\n              {customCopied ? \"âœ“ Copied!\" : \"Copy\"}\n            </Button>\n            <Button onClick={customReset} variant=\"secondary\" size=\"sm\">\n              Reset\n            </Button>\n          </div>\n\n          {customError && (\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n              <p className=\"text-sm text-red-700\">\n                <strong>Error:</strong> {customError.message}\n              </p>\n            </div>\n          )}\n        </div>\n      </Card>\n\n      {/* Code Example */}\n      <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">\n          Code Example (5s timeout)\n        </h4>\n        <div className=\"space-y-4\">\n          <div className=\"relative\">\n            <pre className=\"bg-gray-900 text-gray-100 p-4 rounded-lg text-sm overflow-x-auto\">\n              <code>{codeSnippet}</code>\n            </pre>\n            <Button\n              onClick={() => longTimeoutCopy(codeSnippet)}\n              variant={longTimeoutCopied ? \"default\" : \"outline\"}\n              size=\"sm\"\n              className=\"absolute top-2 right-2\"\n            >\n              {longTimeoutCopied ? \"âœ“ Copied!\" : \"Copy Code\"}\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      {/* Different Timeout Demonstrations */}\n      <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Timeout Demonstrations</h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <TimeoutDemo title=\"Quick (1s)\" timeout={1000} />\n          <TimeoutDemo title=\"Normal (2s)\" timeout={2000} />\n          <TimeoutDemo title=\"Long (4s)\" timeout={4000} />\n        </div>\n      </Card>\n    </div>\n  );\n}\n\ninterface TimeoutDemoProps {\n  title: string;\n  timeout: number;\n}\n\nfunction TimeoutDemo({ title, timeout }: TimeoutDemoProps) {\n  const { copy, copied } = useClipboardCopy({ timeout });\n\n  return (\n    <div className=\"p-4 bg-card border rounded-lg\">\n      <h5 className=\"font-semibold text-primary mb-2\">{title}</h5>\n      <Button\n        onClick={() => copy(`Text copied with ${timeout}ms timeout`)}\n        variant={copied ? \"default\" : \"outline\"}\n        size=\"sm\"\n        className=\"w-full\"\n      >\n        {copied ? \"âœ“ Copied!\" : \"Copy Text\"}\n      </Button>\n      <p className=\"text-xs text-muted-foreground mt-2\">\n        Resets after {timeout / 1000}s\n      </p>\n    </div>\n  );\n}\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-clipboard-copy-ex-01.tsx",
      "target": "/components/unlogg-ui/use-clipboard-copy-ex-01.tsx"
    }
  ]
}