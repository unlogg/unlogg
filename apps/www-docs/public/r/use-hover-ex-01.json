{
  "name": "use-hover-ex-01",
  "type": "registry:example",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://unlogg.com/r/use-hover.json"
  ],
  "files": [
    {
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Card } from \"@/hooks/card\";\nimport { Badge } from \"@/hooks/badge\";\nimport { Button } from \"@/hooks/button\";\nimport { useHover } from \"@/hooks/use-hover\";\n\nexport default function UseHover_Ex_01() {\n  const cardRef = React.useRef<HTMLDivElement>(null);\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n  const imageRef = React.useRef<HTMLDivElement>(null);\n  const textRef = React.useRef<HTMLParagraphElement>(null);\n\n  const isCardHovered = useHover(cardRef);\n  const isButtonHovered = useHover(buttonRef);\n  const isImageHovered = useHover(imageRef);\n  const isTextHovered = useHover(textRef);\n\n  const [hoverCount, setHoverCount] = React.useState(0);\n\n  React.useEffect(() => {\n    if (isCardHovered) {\n      setHoverCount((prev) => prev + 1);\n    }\n  }, [isCardHovered]);\n\n  return (\n    <div className=\"flex flex-col items-center gap-6 p-6\">\n      <div className=\"text-center mb-4\">\n        <h3 className=\"text-lg font-semibold mb-2\">Hover Detection</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Hover over the elements below to see the hook in action\n        </p>\n      </div>\n\n      {/* Main hover card */}\n      <Card\n        ref={cardRef}\n        className={`\n          w-full max-w-md p-6 transition-all duration-300 cursor-pointer\n          ${\n            isCardHovered\n              ? \"shadow-lg scale-105 border-blue-300 \"\n              : \"shadow-sm hover:shadow-md\"\n          }\n        `}\n      >\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex items-center justify-center gap-2\">\n            <span className=\"text-lg font-semibold\">Main Card</span>\n            <Badge variant={isCardHovered ? \"default\" : \"secondary\"}>\n              {isCardHovered ? \"Hovered\" : \"Not Hovered\"}\n            </Badge>\n          </div>\n\n          <div className=\"text-sm text-muted-foreground\">\n            Hover count: {hoverCount}\n          </div>\n\n          {isCardHovered && (\n            <div className=\"text-xs text-primary animate-in fade-in duration-200\">\n              âœ¨ You're hovering over this card!\n            </div>\n          )}\n        </div>\n      </Card>\n\n      {/* Multiple elements grid */}\n      <div className=\"w-full max-w-2xl grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {/* Button element */}\n        <div className=\"text-center space-y-2\">\n          <Button\n            ref={buttonRef}\n            variant={isButtonHovered ? \"default\" : \"outline\"}\n            className={`w-full transition-all duration-200 ${\n              isButtonHovered ? \"scale-105\" : \"\"\n            }`}\n          >\n            Hover Button\n          </Button>\n          <div className=\"text-xs text-muted-foreground\">\n            Status: {isButtonHovered ? \"Hovered\" : \"Idle\"}\n          </div>\n        </div>\n\n        {/* Image/Visual element */}\n        <div className=\"text-center space-y-2\">\n          <div\n            ref={imageRef}\n            className={`\n              w-full h-20 rounded-lg border-2 border-dashed cursor-pointer\n              transition-all duration-300 flex items-center justify-center\n              ${\n                isImageHovered\n                  ? \"border-green-400  scale-105\"\n                  : \"border-gray-300 \"\n              }\n            `}\n          >\n            <div className=\"text-sm font-medium text-center\">\n              {isImageHovered ? \"ðŸŽ¯ Hovering!\" : \"ðŸ“· Hover me\"}\n            </div>\n          </div>\n          <div className=\"text-xs text-muted-foreground\">\n            Visual: {isImageHovered ? \"Active\" : \"Inactive\"}\n          </div>\n        </div>\n\n        {/* Text element */}\n        <div className=\"text-center space-y-2\">\n          <p\n            ref={textRef}\n            className={`\n              p-3 rounded border cursor-pointer transition-all duration-200\n              ${\n                isTextHovered\n                  ? \" border-purple-300 text-purple-700\"\n                  : \" border-gray-200\"\n              }\n            `}\n          >\n            Hover this text\n          </p>\n          <div className=\"text-xs text-muted-foreground\">\n            Text: {isTextHovered ? \"Highlighted\" : \"Normal\"}\n          </div>\n        </div>\n      </div>\n\n      {/* Interactive demo */}\n      <Card className=\"w-full max-w-md p-6\">\n        <h4 className=\"text-md font-semibold mb-4 text-center\">\n          Interactive Demo\n        </h4>\n        <InteractiveHoverDemo />\n      </Card>\n    </div>\n  );\n}\n\nfunction InteractiveHoverDemo() {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const isContainerHovered = useHover(containerRef);\n\n  const [showContent, setShowContent] = React.useState(false);\n\n  // Show content when hovering for more than 500ms\n  React.useEffect(() => {\n    let timer: NodeJS.Timeout;\n\n    if (isContainerHovered) {\n      timer = setTimeout(() => {\n        setShowContent(true);\n      }, 500);\n    } else {\n      setShowContent(false);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isContainerHovered]);\n\n  return (\n    <div className=\"space-y-4\">\n      <div\n        ref={containerRef}\n        className={`\n          min-h-[100px] p-4 rounded-lg border-2 border-dashed cursor-pointer\n          transition-all duration-300 flex flex-col items-center justify-center\n          ${isContainerHovered ? \"border-blue-400 \" : \"border-gray-300 \"}\n        `}\n      >\n        <div className=\"text-center\">\n          <div className=\"text-sm font-medium mb-2\">\n            {isContainerHovered ? \"Keep hovering...\" : \"Hover and wait\"}\n          </div>\n\n          {isContainerHovered && (\n            <div className=\"w-full bg-gray-200 rounded-full h-1.5 mb-2\">\n              <div\n                className=\"bg-blue-600 h-1.5 rounded-full transition-all duration-500\"\n                style={{ width: showContent ? \"100%\" : \"0%\" }}\n              />\n            </div>\n          )}\n\n          {showContent && (\n            <div className=\"text-xs text-primary animate-in fade-in duration-300\">\n              ðŸŽ‰ Content revealed after 500ms of hovering!\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"flex justify-between text-xs text-muted-foreground\">\n        <span>Hover State: {isContainerHovered ? \"Active\" : \"Inactive\"}</span>\n        <span>Content Shown: {showContent ? \"Yes\" : \"No\"}</span>\n      </div>\n    </div>\n  );\n}\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-hover-ex-01.tsx",
      "target": "/components/unlogg-ui/use-hover-ex-01.tsx"
    }
  ]
}