{
  "name": "use-is-online",
  "type": "registry:hook",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:hook",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\ntype NetworkInformation = {\n  downlink?: number;\n  downlinkMax?: number;\n  effectiveType?: \"slow-2g\" | \"2g\" | \"3g\" | \"4g\";\n  rtt?: number;\n  saveData?: boolean;\n  type?:\n    | \"bluetooth\"\n    | \"cellular\"\n    | \"ethernet\"\n    | \"none\"\n    | \"wifi\"\n    | \"wimax\"\n    | \"other\"\n    | \"unknown\";\n};\n\ntype UseIsOnlineReturn = {\n  isOnline: boolean;\n  networkInfo: NetworkInformation | undefined;\n};\n\n/**\n * A custom React hook that detects the user's online status and provides network information.\n *\n * This hook monitors the navigator.onLine property and optionally uses the experimental\n * navigator.connection API to provide detailed network information. It's useful for\n * implementing features like offline mode, adaptive content loading, or network-aware\n * functionality.\n *\n * @returns An object containing:\n *   - `isOnline`: A boolean indicating whether the user is currently online\n *   - `networkInfo`: An object with network connection details (undefined if not supported)\n *\n * @example\n * function NetworkStatus() {\n *   const { isOnline, networkInfo } = useIsOnline();\n *\n *   return (\n *     <div>\n *       <p>Status: {isOnline ? \"Online\" : \"Offline\"}</p>\n *       {networkInfo && (\n *         <p>Connection: {networkInfo.effectiveType}</p>\n *       )}\n *     </div>\n *   );\n * }\n *\n * @example\n * function AdaptiveContent() {\n *   const { isOnline, networkInfo } = useIsOnline();\n *\n *   if (!isOnline) {\n *     return <div>You are offline. Some features may be limited.</div>;\n *   }\n *\n *   if (networkInfo?.effectiveType === \"slow-2g\" || networkInfo?.effectiveType === \"2g\") {\n *     return <div>Loading optimized content for slow connection...</div>;\n *   }\n *\n *   return <div>Loading full content...</div>;\n * }\n *\n * @example\n * function DataSaverMode() {\n *   const { networkInfo } = useIsOnline();\n *\n *   React.useEffect(() => {\n *     if (networkInfo?.saveData) {\n *       console.log(\"User has data saver mode enabled\");\n *       // Load compressed images, reduce auto-play videos, etc.\n *     }\n *   }, [networkInfo?.saveData]);\n *\n *   return <div>Content optimized for data saving</div>;\n * }\n */\nfunction useIsOnline(): UseIsOnlineReturn {\n  const [isOnline, setIsOnline] = React.useState<boolean>(true);\n  const [networkInfo, setNetworkInfo] = React.useState<\n    NetworkInformation | undefined\n  >(undefined);\n\n  console.log(\"networkInfo\", networkInfo);\n\n  React.useEffect(() => {\n    // Check if we're in a browser environment\n    if (typeof window === \"undefined\" || typeof navigator === \"undefined\") {\n      console.error(\n        \"useIsOnline: This hook can only be used in a browser environment\"\n      );\n      setIsOnline(false);\n      setNetworkInfo(undefined);\n      return;\n    }\n\n    // Set initial online status\n    setIsOnline(navigator.onLine);\n\n    // Get network information if available\n    const getNetworkInfo = (): NetworkInformation | undefined => {\n      // Type assertion for experimental API\n      const connection =\n        (navigator as any).connection ||\n        (navigator as any).mozConnection ||\n        (navigator as any).webkitConnection;\n\n      if (!connection) {\n        return undefined;\n      }\n\n      return {\n        downlink: connection.downlink,\n        downlinkMax: connection.downlinkMax,\n        effectiveType: connection.effectiveType,\n        rtt: connection.rtt,\n        saveData: connection.saveData,\n        type: connection.type,\n      };\n    };\n\n    // Set initial network info\n    setNetworkInfo(getNetworkInfo());\n\n    // Event handlers\n    const handleOnline = () => {\n      setIsOnline(true);\n      setNetworkInfo(getNetworkInfo());\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setNetworkInfo(getNetworkInfo());\n    };\n\n    const handleConnectionChange = () => {\n      setNetworkInfo(getNetworkInfo());\n    };\n\n    // Add event listeners\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    // Add connection change listener if available\n    const connection =\n      (navigator as any).connection ||\n      (navigator as any).mozConnection ||\n      (navigator as any).webkitConnection;\n\n    if (connection) {\n      connection.addEventListener(\"change\", handleConnectionChange);\n    } else {\n      console.warn(\n        \"useIsOnline: navigator.connection is not supported in this browser. Network information will be unavailable.\"\n      );\n    }\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n\n      if (connection) {\n        connection.removeEventListener(\"change\", handleConnectionChange);\n      }\n    };\n  }, []);\n\n  return { isOnline, networkInfo };\n}\n\nexport { useIsOnline };\nexport type { UseIsOnlineReturn, NetworkInformation };\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-is-online.ts",
      "target": "/hooks/use-is-online.ts"
    }
  ]
}