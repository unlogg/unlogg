{
  "name": "use-idle-ex-01",
  "type": "registry:example",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://unlogg.com/r/use-idle.json"
  ],
  "files": [
    {
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Card } from \"@/hooks/card\";\nimport { Button } from \"@/hooks/button\";\nimport { Badge } from \"@/hooks/badge\";\nimport { Input } from \"@/hooks/input\";\nimport { useIdle } from \"@/hooks/use-idle\";\n\nexport default function UseIdle_Ex_01() {\n  const [customTimeout, setCustomTimeout] = React.useState(3000);\n  const [lastActivity, setLastActivity] = React.useState<Date | null>(null);\n\n  // Track activity time\n  React.useEffect(() => {\n    const handleActivity = () => {\n      setLastActivity(new Date());\n    };\n\n    const events = [\n      \"keypress\",\n      \"mousemove\",\n      \"touchmove\",\n      \"wheel\",\n      \"click\",\n      \"scroll\",\n    ];\n    events.forEach((event) => {\n      document.addEventListener(event, handleActivity, true);\n    });\n\n    // Set initial activity time\n    setLastActivity(new Date());\n\n    return () => {\n      events.forEach((event) => {\n        document.removeEventListener(event, handleActivity, true);\n      });\n    };\n  }, []);\n\n  return (\n    <div className=\"flex flex-col gap-6 p-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold mb-2\">User Idle Detection Hook</h3>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          Monitors user activity and detects when the user becomes idle\n        </p>\n\n        <div className=\"flex items-center justify-center gap-4 flex-wrap\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-medium\">Last Activity:</span>\n            <Badge variant=\"outline\" className=\"font-mono text-xs\">\n              {lastActivity?.toLocaleTimeString() || \"Never\"}\n            </Badge>\n          </div>\n        </div>\n      </div>\n      {/* Default Idle Detection */}\n      <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">\n          Default Idle Detection (2s timeout)\n        </h4>\n        <DefaultIdleDemo />\n      </Card>\n      Custom Timeout\n      {/* <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Custom Timeout</h4>\n        <div className=\"space-y-4\">\n          <div className=\"flex gap-2 items-center\">\n            <Input\n              type=\"number\"\n              value={customTimeout}\n              onChange={(e) => setCustomTimeout(Number(e.target.value))}\n              placeholder=\"Timeout in ms\"\n              className=\"w-32\"\n            />\n            <span className=\"text-sm text-muted-foreground\">milliseconds</span>\n          </div>\n          <CustomTimeoutDemo timeout={customTimeout} />\n        </div>\n      </Card> */}\n      {/* Custom Events */}\n      {/* <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Custom Events</h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <MouseOnlyDemo />\n          <KeyboardOnlyDemo />\n        </div>\n      </Card> */}\n      {/* Multiple Timers */}\n      {/* <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Multiple Timers</h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <IdleTimer label=\"Quick (1s)\" timeout={1000} color=\"red\" />\n          <IdleTimer label=\"Medium (3s)\" timeout={3000} color=\"yellow\" />\n          <IdleTimer label=\"Long (5s)\" timeout={5000} color=\"green\" />\n        </div>\n      </Card> */}\n      {/* Auto-Save Example */}\n      {/* <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Auto-Save Example</h4>\n        <AutoSaveDemo />\n      </Card> */}\n      {/* Session Warning */}\n      {/* <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Session Warning</h4>\n        <SessionWarningDemo />\n      </Card> */}\n      {/* Activity Instructions */}\n      {/* <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Activity Instructions</h4>\n        <div className=\"space-y-3 text-sm\">\n          <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n            <strong className=\"text-blue-800\">\n              Try these activities to reset idle status:\n            </strong>\n            <ul className=\"list-disc list-inside text-blue-700 mt-1 space-y-1\">\n              <li>Move your mouse cursor</li>\n              <li>Click anywhere on the page</li>\n              <li>Press any key</li>\n              <li>Scroll up or down</li>\n              <li>Touch/swipe (on mobile devices)</li>\n              <li>Use the mouse wheel</li>\n            </ul>\n          </div>\n        </div>\n      </Card> */}\n    </div>\n  );\n}\n\nfunction DefaultIdleDemo() {\n  const isIdle = useIdle(2000);\n\n  console.log(\"Idle status:\", isIdle);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <div className={`text-6xl mb-2 ${isIdle ? \"animate-pulse\" : \"\"}`}>\n          {isIdle ? \"üò¥\" : \"üëÄ\"}\n        </div>\n        <Badge variant={isIdle ? \"destructive\" : \"default\"} className=\"text-sm\">\n          {isIdle ? \"User is Idle\" : \"User is Active\"}\n        </Badge>\n      </div>\n\n      <div className=\"p-3 bg-gray-50 border border-gray-200 rounded-lg\">\n        <p className=\"text-sm text-gray-700\">\n          <strong>Status:</strong>{\" \"}\n          {isIdle\n            ? \"No activity detected for 2 seconds\"\n            : \"User activity detected\"}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction CustomTimeoutDemo({ timeout }: { timeout: number }) {\n  const isIdle = useIdle(timeout);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <div className={`text-4xl mb-2 ${isIdle ? \"animate-bounce\" : \"\"}`}>\n          {isIdle ? \"‚è∞\" : \"‚ö°\"}\n        </div>\n        <Badge variant={isIdle ? \"secondary\" : \"default\"}>\n          {isIdle ? `Idle (${timeout}ms)` : `Active (${timeout}ms)`}\n        </Badge>\n      </div>\n\n      <div className=\"p-3 bg-purple-50 border border-purple-200 rounded-lg\">\n        <p className=\"text-sm text-purple-700\">\n          <strong>Timeout:</strong> {timeout / 1000} seconds\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction MouseOnlyDemo() {\n  const isIdle = useIdle(3000, {\n    events: [\"mousemove\", \"click\"],\n  });\n\n  return (\n    <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n      <h5 className=\"font-semibold text-orange-800 mb-2\">Mouse Only</h5>\n      <div className=\"space-y-2\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl mb-1\">üñ±Ô∏è</div>\n          <Badge variant={isIdle ? \"secondary\" : \"default\"}>\n            {isIdle ? \"No Mouse Activity\" : \"Mouse Active\"}\n          </Badge>\n        </div>\n        <p className=\"text-xs text-orange-700\">\n          Only detects mouse movement and clicks\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction KeyboardOnlyDemo() {\n  const isIdle = useIdle(3000, {\n    events: [\"keypress\", \"keydown\"],\n  });\n\n  return (\n    <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n      <h5 className=\"font-semibold text-green-800 mb-2\">Keyboard Only</h5>\n      <div className=\"space-y-2\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl mb-1\">‚å®Ô∏è</div>\n          <Badge variant={isIdle ? \"secondary\" : \"default\"}>\n            {isIdle ? \"No Keyboard Activity\" : \"Keyboard Active\"}\n          </Badge>\n        </div>\n        <p className=\"text-xs text-green-700\">Only detects keyboard presses</p>\n      </div>\n    </div>\n  );\n}\n\ninterface IdleTimerProps {\n  label: string;\n  timeout: number;\n  color: \"red\" | \"yellow\" | \"green\";\n}\n\nfunction IdleTimer({ label, timeout, color }: IdleTimerProps) {\n  const isIdle = useIdle(timeout);\n\n  const colorClasses = {\n    red: \"bg-red-50 border-red-200 text-red-800\",\n    yellow: \"bg-yellow-50 border-yellow-200 text-yellow-800\",\n    green: \"bg-green-50 border-green-200 text-green-800\",\n  };\n\n  return (\n    <div className={`p-4 border rounded-lg ${colorClasses[color]}`}>\n      <h5 className=\"font-semibold mb-2\">{label}</h5>\n      <div className=\"text-center\">\n        <div className=\"text-xl mb-1\">{isIdle ? \"‚è±Ô∏è\" : \"üî•\"}</div>\n        <Badge variant={isIdle ? \"secondary\" : \"default\"}>\n          {isIdle ? \"Idle\" : \"Active\"}\n        </Badge>\n      </div>\n    </div>\n  );\n}\n\nfunction AutoSaveDemo() {\n  const [text, setText] = React.useState(\"\");\n  const [savedText, setSavedText] = React.useState(\"\");\n  const [lastSaved, setLastSaved] = React.useState<Date | null>(null);\n  const isIdle = useIdle(2000);\n\n  // Auto-save when user becomes idle\n  React.useEffect(() => {\n    if (isIdle && text !== savedText && text.trim() !== \"\") {\n      setSavedText(text);\n      setLastSaved(new Date());\n    }\n  }, [isIdle, text, savedText]);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <label className=\"text-sm font-medium\">\n          Type something (auto-saves when idle for 2s):\n        </label>\n        <Input\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          placeholder=\"Start typing...\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n          <p className=\"text-sm text-blue-700\">\n            <strong>Status:</strong> {isIdle ? \"Auto-saving...\" : \"Typing...\"}\n          </p>\n        </div>\n        <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n          <p className=\"text-sm text-green-700\">\n            <strong>Last Saved:</strong>{\" \"}\n            {lastSaved?.toLocaleTimeString() || \"Never\"}\n          </p>\n        </div>\n      </div>\n\n      {savedText && (\n        <div className=\"p-3 bg-gray-50 border border-gray-200 rounded-lg\">\n          <p className=\"text-sm text-gray-700\">\n            <strong>Saved Content:</strong> \"{savedText}\"\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction SessionWarningDemo() {\n  const isIdle = useIdle(8000); // 8 seconds for demo\n  const [dismissed, setDismissed] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!isIdle) {\n      setDismissed(false);\n    }\n  }, [isIdle]);\n\n  if (!isIdle || dismissed) {\n    return (\n      <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n        <p className=\"text-sm text-green-700\">\n          ‚úÖ Session active - you will be warned after 8 seconds of inactivity\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"p-4 bg-yellow-50 border border-yellow-300 rounded-lg border-l-4\">\n        <div className=\"flex items-start\">\n          <div className=\"text-yellow-600 text-xl mr-3\">‚ö†Ô∏è</div>\n          <div className=\"flex-1\">\n            <h5 className=\"font-semibold text-yellow-800 mb-1\">\n              Session Warning\n            </h5>\n            <p className=\"text-sm text-yellow-700 mb-3\">\n              You've been inactive for a while. Your session will expire soon.\n            </p>\n            <div className=\"flex gap-2\">\n              <Button size=\"sm\" onClick={() => setDismissed(true)}>\n                Stay Active\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => alert(\"Session extended!\")}\n              >\n                Extend Session\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-idle-ex-01.tsx",
      "target": "/components/unlogg-ui/use-idle-ex-01.tsx"
    }
  ]
}