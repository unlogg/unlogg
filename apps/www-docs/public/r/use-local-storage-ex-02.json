{
  "name": "use-local-storage-ex-02",
  "type": "registry:example",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://unlogg.com/r/use-local-storage.json",
    "badge",
    "button",
    "card",
    "input"
  ],
  "files": [
    {
      "type": "registry:example",
      "content": "\"use client\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLocalStorage } from \"@/hooks/use-local-storage\";\nimport { useState } from \"react\";\n\ninterface TodoItem {\n  id: string;\n  text: string;\n  completed: boolean;\n  createdAt: string;\n}\n\nexport default function UseLocalStorage_Ex_02() {\n  const [todos, setTodos] = useLocalStorage<TodoItem[]>({\n    key: \"todo-list\",\n    defaultValue: [],\n  });\n\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const addTodo = () => {\n    if (inputValue.trim()) {\n      const newTodo: TodoItem = {\n        id: Date.now().toString(),\n        text: inputValue.trim(),\n        completed: false,\n        createdAt: new Date().toISOString(),\n      };\n      setTodos([...todos, newTodo]);\n      setInputValue(\"\");\n    }\n  };\n\n  const toggleTodo = (id: string) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    );\n  };\n\n  const deleteTodo = (id: string) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  const clearAll = () => {\n    setTodos([]);\n  };\n\n  const completedCount = todos.filter((todo) => todo.completed).length;\n\n  return (\n    <div className=\"flex flex-col gap-6 p-6\">\n      <div className=\"text-center\">\n        <h3 className=\"mb-2 text-lg font-semibold\">\n          Persistent Todo List Hook\n        </h3>\n        <p className=\"text-muted-foreground mb-4 text-sm\">\n          A todo list that persists across browser sessions using localStorage\n        </p>\n\n        <div className=\"flex flex-wrap items-center justify-center gap-4\">\n          <Badge variant=\"default\" className=\"text-sm\">\n            üìù {todos.length} Total Tasks\n          </Badge>\n          <Badge variant=\"secondary\" className=\"text-sm\">\n            ‚úÖ {completedCount} Completed\n          </Badge>\n          <Badge variant=\"outline\" className=\"font-mono text-xs\">\n            localStorage: todo-list\n          </Badge>\n        </div>\n      </div>\n\n      <Card className=\"mx-auto w-full max-w-4xl p-6\">\n        <h4 className=\"text-md mb-4 font-semibold\">Todo Manager</h4>\n        <TodoManager\n          todos={todos}\n          inputValue={inputValue}\n          onInputChange={setInputValue}\n          onAddTodo={addTodo}\n          onToggleTodo={toggleTodo}\n          onDeleteTodo={deleteTodo}\n          onClearAll={clearAll}\n        />\n      </Card>\n    </div>\n  );\n}\n\nfunction TodoManager({\n  todos,\n  inputValue,\n  onInputChange,\n  onAddTodo,\n  onToggleTodo,\n  onDeleteTodo,\n  onClearAll,\n}: {\n  todos: TodoItem[];\n  inputValue: string;\n  onInputChange: (value: string) => void;\n  onAddTodo: () => void;\n  onToggleTodo: (id: string) => void;\n  onDeleteTodo: (id: string) => void;\n  onClearAll: () => void;\n}) {\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      onAddTodo();\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Add Todo Section */}\n      <div className=\"flex gap-2\">\n        <Input\n          placeholder=\"Add a new todo...\"\n          value={inputValue}\n          onChange={(e) => onInputChange(e.target.value)}\n          onKeyPress={handleKeyPress}\n          className=\"flex-1\"\n        />\n        <Button onClick={onAddTodo} disabled={!inputValue.trim()}>\n          Add\n        </Button>\n      </div>\n\n      {/* Todo List */}\n      <div className=\"space-y-2\">\n        {todos.length === 0 ? (\n          <div className=\"text-muted-foreground py-8 text-center\">\n            <div className=\"mb-2 text-4xl\">üìù</div>\n            <p>No todos yet. Add one above!</p>\n          </div>\n        ) : (\n          todos.map((todo) => (\n            <div\n              key={todo.id}\n              className=\"bg-background flex items-center gap-3 rounded-lg border p-3\"\n            >\n              <button\n                onClick={() => onToggleTodo(todo.id)}\n                className=\"flex-shrink-0\"\n              >\n                <div\n                  className={`flex h-5 w-5 items-center justify-center rounded border-2 ${\n                    todo.completed\n                      ? \"border-green-500 bg-green-500 text-white\"\n                      : \"border-gray-300 hover:border-green-400\"\n                  }`}\n                >\n                  {todo.completed && \"‚úì\"}\n                </div>\n              </button>\n              <span\n                className={`flex-1 ${\n                  todo.completed\n                    ? \"text-muted-foreground line-through\"\n                    : \"text-foreground\"\n                }`}\n              >\n                {todo.text}\n              </span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onDeleteTodo(todo.id)}\n                className=\"text-red-500 hover:text-red-700\"\n              >\n                Delete\n              </Button>\n            </div>\n          ))\n        )}\n      </div>\n\n      {/* Actions */}\n      {todos.length > 0 && (\n        <div className=\"flex items-center justify-between border-t pt-4\">\n          <div className=\"text-muted-foreground text-sm\">\n            {todos.filter((t) => !t.completed).length} remaining\n          </div>\n          <Button variant=\"outline\" onClick={onClearAll} size=\"sm\">\n            Clear All\n          </Button>\n        </div>\n      )}\n\n      {/* Storage Info */}\n      <div className=\"grid grid-cols-1 gap-4 pt-4 md:grid-cols-2\">\n        <div className=\"rounded-lg border border-gray-200 bg-gray-50 p-3\">\n          <p className=\"text-sm text-gray-700\">\n            <strong>Storage Size:</strong> {JSON.stringify(todos).length} bytes\n          </p>\n        </div>\n        <div className=\"rounded-lg border border-gray-200 bg-gray-50 p-3\">\n          <p className=\"text-sm text-gray-700\">\n            <strong>Last Updated:</strong>{\" \"}\n            {todos.length > 0\n              ? new Date(\n                  Math.max(...todos.map((t) => new Date(t.createdAt).getTime()))\n                ).toLocaleTimeString()\n              : \"Never\"}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-local-storage-ex-02.tsx",
      "target": "/components/unlogg-ui/use-local-storage-ex-02.tsx"
    }
  ]
}