{
  "name": "use-state-history",
  "type": "registry:hook",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:hook",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\ntype UseStateHistoryOptions = {\n  maxHistorySize?: number;\n};\n\ntype UseStateHistoryReturn<T> = {\n  setValue: (value: T | ((prev: T) => T)) => void;\n  back: () => void;\n  forward: () => void;\n  go: (index: number) => void;\n  clear: () => void;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  history: T[];\n  currentIndex: number;\n};\n\n/**\n * A custom React hook that provides state management with history functionality.\n *\n * @template T The type of the state value.\n * @param initialValue - The initial value for the state.\n * @param options - Optional configuration for the state history behavior.\n * @param options.maxHistorySize - The maximum number of history entries to keep (default: 50).\n *\n * @returns A tuple containing:\n *   - The current state value.\n *   - An object with control functions and state:\n *     - `setValue`: Function to set a new state value.\n *     - `back`: Function to go back one step in history.\n *     - `forward`: Function to go forward one step in history.\n *     - `go`: Function to go to a specific index in history.\n *     - `clear`: Function to clear the history and reset to initial value.\n *     - `canGoBack`: Boolean indicating if going back is possible.\n *     - `canGoForward`: Boolean indicating if going forward is possible.\n *     - `history`: Array of all history values.\n *     - `currentIndex`: Current position in the history.\n *\n * @example\n * const [value, { setValue, back, forward, canGoBack, canGoForward }] = useStateHistory(0);\n */\nfunction useStateHistory<T>(\n  initialValue: T,\n  options: UseStateHistoryOptions = {}\n): [T, UseStateHistoryReturn<T>] {\n  const { maxHistorySize = 50 } = options;\n\n  const [history, setHistory] = React.useState<T[]>([initialValue]);\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n\n  const currentValue = history[currentIndex];\n\n  const setValue = React.useCallback(\n    (value: T | ((prev: T) => T)) => {\n      const newValue =\n        typeof value === \"function\"\n          ? (value as (prev: T) => T)(currentValue)\n          : value;\n\n      setHistory((prevHistory) => {\n        // Remove any forward history when setting a new value\n        const newHistory = prevHistory.slice(0, currentIndex + 1);\n        newHistory.push(newValue);\n\n        // Limit history size\n        if (newHistory.length > maxHistorySize) {\n          return newHistory.slice(-maxHistorySize);\n        }\n\n        return newHistory;\n      });\n\n      setCurrentIndex((prevIndex) => {\n        const newHistoryLength = Math.min(currentIndex + 2, maxHistorySize);\n        return newHistoryLength - 1;\n      });\n    },\n    [currentValue, currentIndex, maxHistorySize]\n  );\n\n  const back = React.useCallback(() => {\n    if (currentIndex > 0) {\n      setCurrentIndex(currentIndex - 1);\n    }\n  }, [currentIndex]);\n\n  const forward = React.useCallback(() => {\n    if (currentIndex < history.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n    }\n  }, [currentIndex, history.length]);\n\n  const go = React.useCallback(\n    (index: number) => {\n      if (index >= 0 && index < history.length) {\n        setCurrentIndex(index);\n      }\n    },\n    [history.length]\n  );\n\n  const clear = React.useCallback(() => {\n    setHistory([initialValue]);\n    setCurrentIndex(0);\n  }, [initialValue]);\n\n  const canGoBack = currentIndex > 0;\n  const canGoForward = currentIndex < history.length - 1;\n\n  return [\n    currentValue,\n    {\n      setValue,\n      back,\n      forward,\n      go,\n      clear,\n      canGoBack,\n      canGoForward,\n      history,\n      currentIndex,\n    },\n  ];\n}\n\nexport { useStateHistory };\nexport type { UseStateHistoryOptions, UseStateHistoryReturn };\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-state-history.ts",
      "target": "/hooks/use-state-history.ts"
    }
  ]
}