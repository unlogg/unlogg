{
  "name": "use-scroll-into-view-ex-01",
  "type": "registry:example",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://unlogg.com/r/use-scroll-into-view.json"
  ],
  "files": [
    {
      "type": "registry:example",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Card } from \"@/hooks/card\";\nimport { Button } from \"@/hooks/button\";\nimport { Badge } from \"@/hooks/badge\";\nimport { useScrollIntoView } from \"@/hooks/use-scroll-into-view\";\n\nexport default function UseScrollIntoView_Ex_01() {\n  const [target1Ref, { scrollIntoView: scrollToTarget1 }] =\n    useScrollIntoView<HTMLDivElement>({\n      behavior: \"smooth\",\n      block: \"start\",\n    });\n\n  const [target2Ref, { scrollIntoView: scrollToTarget2 }] =\n    useScrollIntoView<HTMLDivElement>({\n      behavior: \"smooth\",\n      block: \"center\",\n    });\n\n  const [target3Ref, { scrollIntoView: scrollToTarget3 }] =\n    useScrollIntoView<HTMLDivElement>({\n      behavior: \"smooth\",\n      block: \"end\",\n    });\n\n  const [autoTargetRef, { scrollIntoView: scrollToAutoTarget }] =\n    useScrollIntoView<HTMLDivElement>({\n      behavior: \"auto\",\n    });\n\n  const scrollableRef = React.useRef<HTMLDivElement>(null);\n\n  return (\n    <div className=\"flex flex-col gap-6 p-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold mb-2\">Scroll Into View Hook</h3>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          Click the buttons to scroll to different targets with various\n          alignments\n        </p>\n\n        {/* Control buttons */}\n        <div className=\"flex flex-wrap gap-2 justify-center mb-6\">\n          <Button onClick={() => scrollToTarget1()} variant=\"outline\" size=\"sm\">\n            Scroll to Top Target\n          </Button>\n          <Button onClick={() => scrollToTarget2()} variant=\"outline\" size=\"sm\">\n            Scroll to Center Target\n          </Button>\n          <Button onClick={() => scrollToTarget3()} variant=\"outline\" size=\"sm\">\n            Scroll to Bottom Target\n          </Button>\n          <Button\n            onClick={() => scrollToAutoTarget()}\n            variant=\"secondary\"\n            size=\"sm\"\n          >\n            Auto Scroll (No Animation)\n          </Button>\n        </div>\n\n        <div className=\"text-xs text-muted-foreground\">\n          ðŸ’¡ Respects your <code>prefers-reduced-motion</code> setting\n        </div>\n      </div>\n\n      {/* Scrollable container */}\n      <Card className=\"w-full max-w-2xl mx-auto\">\n        <div\n          ref={scrollableRef}\n          className=\"h-96 overflow-y-auto border rounded-lg\"\n        >\n          <div className=\"p-4 space-y-8\">\n            {/* Initial content */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">Start of Content</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                This is the beginning of our scrollable content. Scroll down to\n                see the targets.\n              </p>\n              {Array.from({ length: 5 }, (_, i) => (\n                <div key={i} className=\"p-3 bg-gray-50 rounded\">\n                  <p className=\"text-sm\">Filler content block {i + 1}</p>\n                </div>\n              ))}\n            </div>\n\n            {/* Target 1 - Top alignment */}\n            <div\n              ref={target1Ref}\n              className=\"p-4 bg-blue-50 border-2 border-blue-200 rounded-lg\"\n            >\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Badge variant=\"default\">Target 1</Badge>\n                <span className=\"text-sm font-medium\">Top Aligned</span>\n              </div>\n              <p className=\"text-sm text-blue-700\">\n                This target scrolls to the <strong>top</strong> of the viewport\n                when clicked. It uses <code>block: \"start\"</code> alignment.\n              </p>\n            </div>\n\n            {/* More content */}\n            {Array.from({ length: 8 }, (_, i) => (\n              <div key={`mid-${i}`} className=\"p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm\">More content block {i + 1}</p>\n              </div>\n            ))}\n\n            {/* Target 2 - Center alignment */}\n            <div\n              ref={target2Ref}\n              className=\"p-4 bg-green-50 border-2 border-green-200 rounded-lg\"\n            >\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Badge variant=\"secondary\">Target 2</Badge>\n                <span className=\"text-sm font-medium\">Center Aligned</span>\n              </div>\n              <p className=\"text-sm text-green-700\">\n                This target scrolls to the <strong>center</strong> of the\n                viewport. It uses <code>block: \"center\"</code> alignment.\n              </p>\n            </div>\n\n            {/* More content */}\n            {Array.from({ length: 8 }, (_, i) => (\n              <div key={`end-${i}`} className=\"p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm\">Additional content block {i + 1}</p>\n              </div>\n            ))}\n\n            {/* Target 3 - Bottom alignment */}\n            <div\n              ref={target3Ref}\n              className=\"p-4 bg-purple-50 border-2 border-purple-200 rounded-lg\"\n            >\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Badge variant=\"outline\">Target 3</Badge>\n                <span className=\"text-sm font-medium\">Bottom Aligned</span>\n              </div>\n              <p className=\"text-sm text-purple-700\">\n                This target scrolls to the <strong>bottom</strong> of the\n                viewport. It uses <code>block: \"end\"</code> alignment.\n              </p>\n            </div>\n\n            {/* More content */}\n            {Array.from({ length: 6 }, (_, i) => (\n              <div key={`final-${i}`} className=\"p-3 bg-gray-50 rounded\">\n                <p className=\"text-sm\">Final content block {i + 1}</p>\n              </div>\n            ))}\n\n            {/* Auto scroll target */}\n            <div\n              ref={autoTargetRef}\n              className=\"p-4 bg-orange-50 border-2 border-orange-200 rounded-lg\"\n            >\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Badge variant=\"destructive\">Auto Target</Badge>\n                <span className=\"text-sm font-medium\">No Animation</span>\n              </div>\n              <p className=\"text-sm text-orange-700\">\n                This target uses <code>behavior: \"auto\"</code> for instant\n                scrolling without animation. Also used when reduced motion is\n                preferred.\n              </p>\n            </div>\n\n            {/* End content */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">End of Content</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                You've reached the end of our scrollable content.\n              </p>\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Advanced example */}\n      <Card className=\"w-full max-w-2xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4 text-center\">\n          Advanced Navigation\n        </h4>\n        <NavigationDemo />\n      </Card>\n    </div>\n  );\n}\n\nfunction NavigationDemo() {\n  const sections = [\n    { id: \"intro\", title: \"Introduction\", color: \"blue\" },\n    { id: \"features\", title: \"Features\", color: \"green\" },\n    { id: \"usage\", title: \"Usage\", color: \"purple\" },\n    { id: \"conclusion\", title: \"Conclusion\", color: \"orange\" },\n  ];\n\n  const refs = React.useRef<Record<string, React.RefObject<HTMLDivElement>>>(\n    {}\n  );\n  const scrollers = React.useRef<Record<string, any>>({});\n\n  // Use individual hooks for each section\n  const [introRef, { scrollIntoView: scrollToIntro }] =\n    useScrollIntoView<HTMLDivElement>();\n  const [featuresRef, { scrollIntoView: scrollToFeatures }] =\n    useScrollIntoView<HTMLDivElement>();\n  const [usageRef, { scrollIntoView: scrollToUsage }] =\n    useScrollIntoView<HTMLDivElement>();\n  const [conclusionRef, { scrollIntoView: scrollToConclusion }] =\n    useScrollIntoView<HTMLDivElement>();\n\n  const sectionRefs = {\n    intro: introRef,\n    features: featuresRef,\n    usage: usageRef,\n    conclusion: conclusionRef,\n  };\n\n  const sectionScrollers = {\n    intro: scrollToIntro,\n    features: scrollToFeatures,\n    usage: scrollToUsage,\n    conclusion: scrollToConclusion,\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Navigation */}\n      <div className=\"flex flex-wrap gap-2 justify-center p-4 bg-gray-50 rounded-lg\">\n        {sections.map((section) => (\n          <Button\n            key={section.id}\n            onClick={() =>\n              sectionScrollers[section.id as keyof typeof sectionScrollers]()\n            }\n            variant=\"outline\"\n            size=\"sm\"\n          >\n            {section.title}\n          </Button>\n        ))}\n      </div>\n\n      {/* Content sections */}\n      <div className=\"h-64 overflow-y-auto border rounded-lg\">\n        <div className=\"p-4 space-y-8\">\n          <div\n            ref={introRef}\n            className=\"p-4 bg-blue-50 border border-blue-200 rounded\"\n          >\n            <h5 className=\"font-semibold text-blue-800 mb-2\">Introduction</h5>\n            <p className=\"text-sm text-blue-700\">\n              Welcome to our advanced navigation demo. This section demonstrates\n              how to create smooth scrolling navigation with multiple targets.\n            </p>\n            {Array.from({ length: 3 }, (_, i) => (\n              <p key={i} className=\"text-xs text-blue-600 mt-2\">\n                Introduction content line {i + 1}\n              </p>\n            ))}\n          </div>\n\n          <div\n            ref={featuresRef}\n            className=\"p-4 bg-green-50 border border-green-200 rounded\"\n          >\n            <h5 className=\"font-semibold text-green-800 mb-2\">Features</h5>\n            <p className=\"text-sm text-green-700\">\n              Our scroll hook provides smooth animations, respects user\n              preferences, and works with any scrollable container.\n            </p>\n            {Array.from({ length: 4 }, (_, i) => (\n              <p key={i} className=\"text-xs text-green-600 mt-2\">\n                Feature description {i + 1}\n              </p>\n            ))}\n          </div>\n\n          <div\n            ref={usageRef}\n            className=\"p-4 bg-purple-50 border border-purple-200 rounded\"\n          >\n            <h5 className=\"font-semibold text-purple-800 mb-2\">Usage</h5>\n            <p className=\"text-sm text-purple-700\">\n              Simply create refs for your target elements and use the scroll\n              functions to navigate between them smoothly.\n            </p>\n            {Array.from({ length: 5 }, (_, i) => (\n              <p key={i} className=\"text-xs text-purple-600 mt-2\">\n                Usage example {i + 1}\n              </p>\n            ))}\n          </div>\n\n          <div\n            ref={conclusionRef}\n            className=\"p-4 bg-orange-50 border border-orange-200 rounded\"\n          >\n            <h5 className=\"font-semibold text-orange-800 mb-2\">Conclusion</h5>\n            <p className=\"text-sm text-orange-700\">\n              The useScrollIntoView hook makes it easy to create engaging,\n              accessible navigation experiences in your React applications.\n            </p>\n            {Array.from({ length: 3 }, (_, i) => (\n              <p key={i} className=\"text-xs text-orange-600 mt-2\">\n                Conclusion point {i + 1}\n              </p>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-scroll-into-view-ex-01.tsx",
      "target": "/components/unlogg-ui/use-scroll-into-view-ex-01.tsx"
    }
  ]
}