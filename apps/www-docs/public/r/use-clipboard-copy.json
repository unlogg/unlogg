{
  "name": "use-clipboard-copy",
  "type": "registry:hook",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:hook",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\ninterface UseClipboardCopyOptions {\n  /**\n   * The timeout in milliseconds after which the copied state resets to false.\n   * @default 2000\n   */\n  timeout?: number;\n  /**\n   * Callback function called when text is successfully copied.\n   */\n  onSuccess?: (text: string) => void;\n  /**\n   * Callback function called when copying fails.\n   */\n  onError?: (error: Error) => void;\n}\n\ninterface UseClipboardCopyReturn {\n  /**\n   * Whether text was recently copied (true for the duration of the timeout).\n   */\n  copied: boolean;\n  /**\n   * Function to copy text to the clipboard.\n   */\n  copy: (text: string) => Promise<void>;\n  /**\n   * The error that occurred during copying, if any.\n   */\n  error: Error | null;\n  /**\n   * Function to manually reset the copied state.\n   */\n  reset: () => void;\n}\n\n/**\n * A custom React hook that provides clipboard copy functionality with state management.\n *\n * This hook is useful for:\n * - Copying text to the clipboard with visual feedback\n * - Handling clipboard API errors gracefully\n * - Automatically resetting the copied state after a timeout\n * - Providing user feedback for copy operations\n *\n * @param options - Configuration options for the clipboard copy behavior\n * @returns An object containing the copy function, copied state, error state, and reset function\n *\n * @example\n * function CopyButton() {\n *   const { copy, copied, error } = useClipboardCopy({\n *     timeout: 2000,\n *     onSuccess: (text) => console.log('Copied:', text),\n *     onError: (err) => console.error('Copy failed:', err)\n *   });\n *\n *   const handleCopy = () => {\n *     copy('Hello, World!');\n *   };\n *\n *   return (\n *     <button onClick={handleCopy}>\n *       {copied ? 'Copied!' : 'Copy'}\n *     </button>\n *   );\n * }\n *\n * @example\n * function CodeBlock({ code }: { code: string }) {\n *   const { copy, copied } = useClipboardCopy();\n *\n *   return (\n *     <div>\n *       <pre>{code}</pre>\n *       <button onClick={() => copy(code)}>\n *         {copied ? 'âœ“ Copied' : 'Copy Code'}\n *       </button>\n *     </div>\n *   );\n * }\n */\nfunction useClipboardCopy(\n  options: UseClipboardCopyOptions = {}\n): UseClipboardCopyReturn {\n  const { timeout = 2000, onSuccess, onError } = options;\n\n  const [copied, setCopied] = React.useState(false);\n  const [error, setError] = React.useState<Error | null>(null);\n  const timeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  const reset = React.useCallback(() => {\n    setCopied(false);\n    setError(null);\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  }, []);\n\n  const copy = React.useCallback(\n    async (text: string) => {\n      try {\n        // Clear any existing timeout\n        reset();\n\n        // Check if clipboard API is available\n        if (!navigator.clipboard || !navigator.clipboard.writeText) {\n          throw new Error(\"Clipboard API not supported\");\n        }\n\n        await navigator.clipboard.writeText(text);\n\n        setCopied(true);\n        setError(null);\n\n        // Call success callback if provided\n        onSuccess?.(text);\n\n        // Set timeout to reset copied state\n        timeoutRef.current = setTimeout(() => {\n          setCopied(false);\n          timeoutRef.current = null;\n        }, timeout);\n      } catch (err) {\n        const error =\n          err instanceof Error ? err : new Error(\"Failed to copy to clipboard\");\n        setError(error);\n        setCopied(false);\n\n        // Call error callback if provided\n        onError?.(error);\n      }\n    },\n    [timeout, onSuccess, onError, reset]\n  );\n\n  // Cleanup timeout on unmount\n  React.useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    copied,\n    copy,\n    error,\n    reset,\n  };\n}\n\nexport { useClipboardCopy };\nexport type { UseClipboardCopyOptions, UseClipboardCopyReturn };\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-clipboard-copy.ts",
      "target": "/hooks/use-clipboard-copy.ts"
    }
  ]
}