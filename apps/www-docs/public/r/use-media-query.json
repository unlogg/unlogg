{
  "name": "use-media-query",
  "type": "registry:hook",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:hook",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\ntype UseMediaQueryOptions = {\n  /**\n   * The default value to return if the hook is being run on the server.\n   * @default false\n   */\n  defaultValue?: boolean;\n  /**\n   * If true (default), the hook will initialize reading the media query.\n   * In SSR, you should set it to false, returning options.defaultValue or false initially.\n   * @default true\n   */\n  initializeWithValue?: boolean;\n};\n\n/**\n * Custom hook that tracks the state of a media query using the Match Media API.\n *\n * @param query - The media query to track.\n * @param options - The options for customizing the behavior of the hook (optional).\n * @returns The current state of the media query (true if the query matches, false otherwise).\n *\n * @example\n * const isMobile = useMediaQuery('(max-width: 768px)');\n * const isDark = useMediaQuery('(prefers-color-scheme: dark)');\n * const prefersReducedMotion = useMediaQuery('(prefers-reduced-motion: reduce)');\n *\n * // With options for SSR\n * const isMobile = useMediaQuery('(max-width: 768px)', {\n *   defaultValue: false,\n *   initializeWithValue: false\n * });\n */\nfunction useMediaQuery(\n  query: string,\n  options: UseMediaQueryOptions = {}\n): boolean {\n  const { defaultValue = false, initializeWithValue = true } = options;\n\n  const getMatches = React.useCallback(\n    (query: string): boolean => {\n      if (typeof window === \"undefined\") {\n        return defaultValue;\n      }\n      return window.matchMedia(query).matches;\n    },\n    [defaultValue]\n  );\n\n  const [matches, setMatches] = React.useState<boolean>(() => {\n    if (initializeWithValue) {\n      return getMatches(query);\n    }\n    return defaultValue;\n  });\n\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    const matchMedia = window.matchMedia(query);\n\n    // Update state if the value has changed\n    const updateMatches = () => {\n      setMatches(matchMedia.matches);\n    };\n\n    // Set the initial value if we didn't initialize with it\n    if (!initializeWithValue) {\n      setMatches(matchMedia.matches);\n    }\n\n    // Listen for changes\n    matchMedia.addEventListener(\"change\", updateMatches);\n\n    return () => {\n      matchMedia.removeEventListener(\"change\", updateMatches);\n    };\n  }, [query, initializeWithValue]);\n\n  return matches;\n}\n\nexport { useMediaQuery };\nexport type { UseMediaQueryOptions };\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-media-query.ts",
      "target": "/hooks/use-media-query.ts"
    }
  ]
}