{
  "name": "use-is-client-ex-01",
  "type": "registry:example",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://unlogg.com/r/use-is-client.json",
    "badge",
    "card"
  ],
  "files": [
    {
      "type": "registry:example",
      "content": "\"use client\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card } from \"@/components/ui/card\";\nimport { useIsClient } from \"@/hooks/use-is-client\";\nimport * as React from \"react\";\n\nexport default function UseIsClient_Ex_01() {\n  const isClient = useIsClient();\n  const [mounted, setMounted] = React.useState(false);\n  const renderCountRef = React.useRef(0);\n\n  // Track render count using ref to avoid infinite loop\n  renderCountRef.current += 1;\n\n  // Track when component is mounted\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  return (\n    <div className=\"flex flex-col gap-6 p-6\">\n      <div className=\"text-center\">\n        <h3 className=\"mb-2 text-lg font-semibold\">Client Detection Hook</h3>\n        <p className=\"text-muted-foreground mb-4 text-sm\">\n          This hook helps prevent hydration mismatches and enables safe\n          client-side rendering\n        </p>\n\n        <div className=\"flex items-center justify-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-medium\">Client Status:</span>\n            <Badge variant={isClient ? \"default\" : \"secondary\"}>\n              {isClient ? \"Client Side\" : \"Server Side\"}\n            </Badge>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm font-medium\">Mounted:</span>\n            <Badge variant={mounted ? \"outline\" : \"secondary\"}>\n              {mounted ? \"Yes\" : \"No\"}\n            </Badge>\n          </div>\n        </div>\n      </div>\n      {/* Status Overview */}\n      <Card className=\"mx-auto w-full max-w-4xl p-6\">\n        <h4 className=\"text-md mb-4 font-semibold\">Hydration Status</h4>\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n          <StatusCard\n            title=\"useIsClient()\"\n            value={isClient}\n            description=\"Indicates if running on client\"\n            trueLabel=\"Client\"\n            falseLabel=\"Server\"\n          />\n          <StatusCard\n            title=\"Component Mounted\"\n            value={mounted}\n            description=\"Component mount status\"\n            trueLabel=\"Mounted\"\n            falseLabel=\"Not Mounted\"\n          />\n          <div className=\"rounded-lg border p-4\">\n            <h5 className=\"text-primary mb-2 font-semibold\">Render Count</h5>\n            <div className=\"text-primary mb-2 font-mono text-2xl font-bold\">\n              {renderCountRef.current}\n            </div>\n            <p className=\"text-muted-foreground text-sm\">\n              Total component renders\n            </p>\n          </div>\n        </div>\n      </Card>\n      Client-only content\n      <Card className=\"mx-auto w-full max-w-4xl p-6\">\n        <h4 className=\"text-md mb-4 font-semibold\">Client-Only Content</h4>\n        <ClientOnlyDemo />\n      </Card>\n      {/* Browser API access */}\n      {/* <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">Safe Browser API Access</h4>\n        <BrowserAPIDemo />\n      </Card> */}\n      {/* Conditional rendering examples */}\n      {/* <Card className=\"w-full max-w-4xl mx-auto p-6\">\n        <h4 className=\"text-md font-semibold mb-4\">\n          Conditional Rendering Patterns\n        </h4>\n        <ConditionalRenderingDemo />\n      </Card> */}\n    </div>\n  );\n}\n\ninterface StatusCardProps {\n  title: string;\n  value: boolean;\n  description: string;\n  trueLabel: string;\n  falseLabel: string;\n}\n\nfunction StatusCard({\n  title,\n  value,\n  description,\n  trueLabel,\n  falseLabel,\n}: StatusCardProps) {\n  return (\n    <div\n      className={`rounded-lg border-2 p-4 transition-all duration-200 ${value ? \"border-green-300\" : \"border-gray-200 bg-gray-50\"} `}\n    >\n      <div className=\"text-center\">\n        <h5 className=\"mb-2 text-sm font-semibold\">{title}</h5>\n        <div\n          className={`mx-auto mb-2 h-4 w-4 rounded-full ${value ? \"bg-green-500\" : \"bg-gray-400\"} `}\n        />\n        <Badge variant={value ? \"default\" : \"secondary\"} className=\"mb-2\">\n          {value ? trueLabel : falseLabel}\n        </Badge>\n        <p className=\"text-muted-foreground text-xs\">{description}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction ClientOnlyDemo() {\n  const isClient = useIsClient();\n\n  return (\n    <div className=\"space-y-4\">\n      <p className=\"text-muted-foreground mb-4 text-sm\">\n        The content below only appears after client-side hydration:\n      </p>\n\n      {!isClient ? (\n        <div className=\"rounded-lg border border-yellow-200 bg-yellow-50 p-4\">\n          <p className=\"text-sm text-yellow-800\">\n            üîÑ Server-side rendering... Client content will appear after\n            hydration.\n          </p>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          <div className=\"rounded-lg border border-green-200 bg-green-50 p-4\">\n            <h5 className=\"mb-2 font-semibold text-green-800\">\n              ‚úÖ Client-Side Content\n            </h5>\n            <p className=\"text-sm text-green-700\">\n              This content is now safely rendered on the client side!\n            </p>\n          </div>\n\n          <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n            <h5 className=\"mb-2 font-semibold text-blue-800\">\n              üåê Browser Information\n            </h5>\n            <div className=\"grid grid-cols-1 gap-2 text-sm text-blue-700 md:grid-cols-2\">\n              <div>User Agent: {navigator.userAgent.slice(0, 50)}...</div>\n              <div>Language: {navigator.language}</div>\n              <div>Online: {navigator.onLine ? \"Yes\" : \"No\"}</div>\n              <div>\n                Cookie Enabled: {navigator.cookieEnabled ? \"Yes\" : \"No\"}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction BrowserAPIDemo() {\n  const isClient = useIsClient();\n  const [locationInfo, setLocationInfo] = React.useState<any>(null);\n  const [storageInfo, setStorageInfo] = React.useState<any>(null);\n\n  React.useEffect(() => {\n    if (isClient) {\n      // Safe to access browser APIs now\n      setLocationInfo({\n        href: window.location.href,\n        hostname: window.location.hostname,\n        pathname: window.location.pathname,\n      });\n\n      setStorageInfo({\n        localStorage: typeof window.localStorage !== \"undefined\",\n        sessionStorage: typeof window.sessionStorage !== \"undefined\",\n        indexedDB: typeof window.indexedDB !== \"undefined\",\n      });\n    }\n  }, [isClient]);\n\n  if (!isClient) {\n    return (\n      <div className=\"rounded-lg border border-gray-200 bg-gray-50 p-4\">\n        <p className=\"text-sm text-gray-600\">\n          Browser APIs will be accessed safely after client-side hydration...\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n        <div className=\"rounded-lg border border-purple-200 bg-purple-50 p-4\">\n          <h5 className=\"mb-2 font-semibold text-purple-800\">\n            üìç Location API\n          </h5>\n          {locationInfo && (\n            <div className=\"space-y-1 text-sm text-purple-700\">\n              <div>Host: {locationInfo.hostname}</div>\n              <div>Path: {locationInfo.pathname}</div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"rounded-lg border border-indigo-200 bg-indigo-50 p-4\">\n          <h5 className=\"mb-2 font-semibold text-indigo-800\">\n            üíæ Storage APIs\n          </h5>\n          {storageInfo && (\n            <div className=\"space-y-1 text-sm text-indigo-700\">\n              <div>localStorage: {storageInfo.localStorage ? \"‚úÖ\" : \"‚ùå\"}</div>\n              <div>\n                sessionStorage: {storageInfo.sessionStorage ? \"‚úÖ\" : \"‚ùå\"}\n              </div>\n              <div>indexedDB: {storageInfo.indexedDB ? \"‚úÖ\" : \"‚ùå\"}</div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ConditionalRenderingDemo() {\n  const isClient = useIsClient();\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n        {/* Pattern 1: Loading state */}\n        <div className=\"rounded-lg border border-orange-200 bg-orange-50 p-4\">\n          <h5 className=\"mb-2 font-semibold text-orange-800\">\n            Pattern 1: Loading\n          </h5>\n          <div className=\"text-sm text-orange-700\">\n            {!isClient ? (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-orange-400 border-t-transparent\" />\n                Loading...\n              </div>\n            ) : (\n              <div>‚úÖ Content loaded!</div>\n            )}\n          </div>\n        </div>\n\n        {/* Pattern 2: Null fallback */}\n        <div className=\"rounded-lg border border-green-200 bg-green-50 p-4\">\n          <h5 className=\"mb-2 font-semibold text-green-800\">\n            Pattern 2: Null Fallback\n          </h5>\n          <div className=\"text-sm text-green-700\">\n            <div>Always visible content</div>\n            {isClient && <div>+ Client-only feature</div>}\n          </div>\n        </div>\n\n        {/* Pattern 3: Placeholder */}\n        <div className=\"rounded-lg border border-blue-200 bg-blue-50 p-4\">\n          <h5 className=\"mb-2 font-semibold text-blue-800\">\n            Pattern 3: Placeholder\n          </h5>\n          <div className=\"text-sm text-blue-700\">\n            {!isClient ? (\n              <div className=\"h-8 animate-pulse rounded bg-blue-200\" />\n            ) : (\n              <div>Dynamic client content</div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"rounded-lg border border-gray-200 bg-gray-50 p-4\">\n        <h5 className=\"mb-2 font-semibold text-gray-800\">Code Examples</h5>\n        <div className=\"space-y-2 font-mono text-sm\">\n          <div className=\"rounded border bg-white p-2\">\n            {`{!isClient ? <Loading /> : <ClientContent />}`}\n          </div>\n          <div className=\"rounded border bg-white p-2\">\n            {`{isClient && <BrowserOnlyFeature />}`}\n          </div>\n          <div className=\"rounded border bg-white p-2\">\n            {`{!isClient ? <Placeholder /> : <DynamicContent />}`}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-is-client-ex-01.tsx",
      "target": "/components/unlogg-ui/use-is-client-ex-01.tsx"
    }
  ]
}