{
  "name": "use-scroll-into-view",
  "type": "registry:hook",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:hook",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\ntype ScrollIntoViewOptions = {\n  behavior?: \"auto\" | \"smooth\";\n  block?: \"start\" | \"center\" | \"end\" | \"nearest\";\n  inline?: \"start\" | \"center\" | \"end\" | \"nearest\";\n};\n\ntype UseScrollIntoViewReturn = {\n  scrollIntoView: (options?: ScrollIntoViewOptions) => void;\n  cancel: () => void;\n};\n\n/**\n * A custom React hook that handles scroll behavior for any scrollable element.\n * Adjusts scrolling animation with respect to the reduced-motion user preference.\n *\n * @param options - Optional scroll configuration options\n * @param options.behavior - Scroll behavior ('auto' or 'smooth')\n * @param options.block - Vertical alignment ('start', 'center', 'end', 'nearest')\n * @param options.inline - Horizontal alignment ('start', 'center', 'end', 'nearest')\n *\n * @returns A tuple containing:\n *   - A ref object that must be attached to the element you want to scroll to\n *   - An object with control functions:\n *     - `scrollIntoView`: Function to trigger scrolling with optional override options\n *     - `cancel`: Function to cancel ongoing smooth scrolling\n *\n * @example\n * const [targetRef, { scrollIntoView }] = useScrollIntoView();\n *\n * return (\n *   <div>\n *     <button onClick={() => scrollIntoView()}>Scroll to target</button>\n *     <div ref={targetRef}>Target element</div>\n *   </div>\n * );\n */\nfunction useScrollIntoView<T extends HTMLElement = HTMLElement>(\n  options: ScrollIntoViewOptions = {}\n): [React.RefObject<T | null>, UseScrollIntoViewReturn] {\n  const ref = React.useRef<T | null>(null);\n  const animationFrameRef = React.useRef<number | null>(null);\n\n  const defaultOptions: ScrollIntoViewOptions = {\n    behavior: \"smooth\",\n    block: \"start\",\n    inline: \"nearest\",\n    ...options,\n  };\n\n  const cancel = React.useCallback(() => {\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n      animationFrameRef.current = null;\n    }\n  }, []);\n\n  const scrollIntoView = React.useCallback(\n    (overrideOptions?: ScrollIntoViewOptions) => {\n      const element = ref.current;\n      if (!element) return;\n\n      cancel(); // Cancel any ongoing scroll\n\n      const finalOptions = { ...defaultOptions, ...overrideOptions };\n\n      // Check for reduced motion preference\n      const prefersReducedMotion = window.matchMedia(\n        \"(prefers-reduced-motion: reduce)\"\n      ).matches;\n\n      // Override behavior if user prefers reduced motion\n      if (prefersReducedMotion && finalOptions.behavior === \"smooth\") {\n        finalOptions.behavior = \"auto\";\n      }\n\n      // Use requestAnimationFrame to ensure smooth execution\n      animationFrameRef.current = requestAnimationFrame(() => {\n        element.scrollIntoView({\n          behavior: finalOptions.behavior,\n          block: finalOptions.block,\n          inline: finalOptions.inline,\n        });\n      });\n    },\n    [defaultOptions, cancel]\n  );\n\n  // Cleanup on unmount\n  React.useEffect(() => {\n    return () => {\n      cancel();\n    };\n  }, [cancel]);\n\n  return [ref, { scrollIntoView, cancel }];\n}\n\nexport { useScrollIntoView };\nexport type { ScrollIntoViewOptions, UseScrollIntoViewReturn };\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-scroll-into-view.ts",
      "target": "/hooks/use-scroll-into-view.ts"
    }
  ]
}