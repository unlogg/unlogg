{
  "name": "user-selector",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { createAvatar } from \"@dicebear/core\";\nimport { thumbs } from \"@dicebear/collection\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/components/ui/utils\";\n\ntype User = {\n  id: string;\n  email: string;\n  name?: string;\n  avatar?: string;\n};\n\ninterface AssigneeSelectorProps {\n  users?: User[];\n  value?: User | null;\n  onValueChange?: (value: User | null) => void;\n  onInviteNewUser?: () => void;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  className?: string;\n}\n\nfunction AssigneeSelector({\n  users = [],\n  value,\n  onValueChange,\n  onInviteNewUser,\n  placeholder = \"No assignee\",\n  searchPlaceholder = \"Search users...\",\n  className = \"w-[200px]\",\n}: AssigneeSelectorProps) {\n  const [open, setOpen] = React.useState(false);\n  const [selectedUser, setSelectedUser] = React.useState<User | null>(\n    value || null\n  );\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  console.log(\"seelectedUser\", selectedUser);\n  // Use controlled value if provided, otherwise use internal state\n  const currentValue = value !== undefined ? value : selectedUser;\n\n  const handleSelect = (selectedValue: string) => {\n    if (selectedValue === \"no-assignee\") {\n      const newUser = null;\n      if (value === undefined) {\n        setSelectedUser(newUser);\n      }\n      onValueChange?.(newUser);\n    } else {\n      const newUser = users.find((user) => user.id === selectedValue) || null;\n      if (value === undefined) {\n        setSelectedUser(newUser);\n      }\n      onValueChange?.(newUser);\n    }\n    setOpen(false);\n    setInputValue(\"\");\n  };\n\n  const handleInviteNewUser = () => {\n    console.log(\"Inviting new user...\");\n    onInviteNewUser?.();\n    setOpen(false);\n    setInputValue(\"\");\n  };\n\n  const filteredUsers = users.filter((user) => {\n    const searchTerm = inputValue.toLowerCase();\n    const name = user.name?.toLowerCase() || \"\";\n    const email = user.email.toLowerCase();\n    return name.includes(searchTerm) || email.includes(searchTerm);\n  });\n\n  const getUserDisplayName = (user: User) => {\n    return user.name || user.email;\n  };\n\n  const getUserInitials = (user: User) => {\n    if (user.name) {\n      return user.name\n        .split(\" \")\n        .map((n) => n[0])\n        .join(\"\")\n        .toUpperCase()\n        .slice(0, 2);\n    }\n    return user.email[0].toUpperCase();\n  };\n\n  console.log(\"currentValue\", currentValue);\n\n  const avatar = React.useMemo(() => {\n    return createAvatar(thumbs, {\n      size: 64,\n      seed:\n        currentValue?.email ||\n        currentValue?.name ||\n        selectedUser?.email ||\n        \"default\",\n      // ... other options\n    }).toDataUri();\n  }, [currentValue?.email, currentValue?.name, selectedUser?.email]);\n\n  // function to create avatar image , optimize with useCallback if needed\n  // This function can be used to create an avatar image for any user\n  // It uses the user's email or name as the seed for the avatar generation\n\n  const createAvatarImage = (user: User) => {\n    return createAvatar(thumbs, {\n      size: 64,\n      seed: user.email || user.name || \"default\",\n      // ... other options\n    }).toDataUri();\n  };\n\n  return (\n    <div className=\"flex items-center space-x-4\">\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outlineSecondary\"\n            className={cn(`justify-start ${className}`)}\n          >\n            {currentValue ? (\n              <div className=\"flex items-center gap-2\">\n                <img\n                  src={selectedUser?.avatar ? selectedUser.avatar : avatar}\n                  alt=\"Avatar\"\n                  className=\"h-full w-6 rounded-full\"\n                />\n                <span className=\"truncate\">\n                  {getUserDisplayName(currentValue)}\n                </span>\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"bg-muted flex h-6 w-6 items-center justify-center rounded-full text-xs\">\n                  ?\n                </div>\n                <span>{placeholder}</span>\n              </div>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"p-0\" side=\"right\" align=\"start\">\n          <Command shouldFilter={false}>\n            <CommandInput\n              placeholder={searchPlaceholder}\n              value={inputValue}\n              onValueChange={setInputValue}\n            />\n            <CommandList>\n              <CommandGroup>\n                <CommandItem\n                  key=\"no-assignee\"\n                  value=\"no-assignee\"\n                  onSelect={handleSelect}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"bg-muted flex h-6 w-6 items-center justify-center rounded-full text-xs\">\n                      ?\n                    </div>\n                    <span>No assignee</span>\n                  </div>\n                </CommandItem>\n              </CommandGroup>\n\n              {filteredUsers.length > 0 && (\n                <>\n                  <CommandSeparator />\n                  <CommandGroup>\n                    {filteredUsers.map((user) => (\n                      <CommandItem\n                        key={user.id}\n                        value={user.id}\n                        onSelect={handleSelect}\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          {/* <div className=\"bg-primary text-primary-foreground flex h-6 w-6 items-center justify-center rounded-full text-xs font-medium\">\n                            {getUserInitials(user)}\n                          </div> */}\n                          <img\n                            src={createAvatarImage(user)}\n                            alt=\"Avatar\"\n                            className=\"h-full w-8 rounded-full\"\n                          />\n                          <div className=\"flex flex-col\">\n                            <span className=\"truncate\">\n                              {getUserDisplayName(user)}\n                            </span>\n                            {user.name && (\n                              <span className=\"text-muted-foreground truncate text-xs\">\n                                {user.email}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                </>\n              )}\n\n              {filteredUsers.length === 0 && inputValue.trim() && (\n                <CommandEmpty>No users found.</CommandEmpty>\n              )}\n            </CommandList>\n\n            <CommandSeparator />\n            <div className=\"p-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleInviteNewUser}\n                className=\"w-full justify-start\"\n              >\n                + Invite new user\n              </Button>\n            </div>\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n\nexport default AssigneeSelector;\n",
      "path": "/../../packages/ui/src/components/unlogg-ui/user-selector/user-selector.tsx",
      "target": "/components/unlogg-ui/user-selector.tsx"
    }
  ]
}