{
  "name": "use-countdown",
  "type": "registry:hook",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:hook",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\ntype UseCountdownOptions = {\n  countStart: number;\n  intervalMs?: number;\n  onComplete?: () => void;\n};\n\ntype UseCountdownReturn = {\n  startCountdown: () => void;\n  stopCountdown: () => void;\n  resetCountdown: () => void;\n  isActive: boolean;\n};\n\n/**\n * A custom React hook that provides countdown timer functionality.\n *\n * @param options - Configuration options for the countdown.\n * @param options.countStart - The initial value to start counting down from.\n * @param options.intervalMs - The interval in milliseconds between countdown ticks (default: 1000).\n * @param options.onComplete - Optional callback invoked when the countdown reaches zero.\n *\n * @returns A tuple containing:\n *   - The current count value.\n *   - An object with control functions and state:\n *     - `startCountdown`: Starts the countdown if the count is greater than zero.\n *     - `stopCountdown`: Stops the countdown and clears the interval.\n *     - `resetCountdown`: Resets the countdown to the initial value and stops it.\n *     - `isActive`: Boolean indicating if the countdown is currently active.\n *\n * @example\n * const [count, { startCountdown, stopCountdown, resetCountdown, isActive }] = useCountdown({\n *   countStart: 10,\n *   intervalMs: 1000,\n *   onComplete: () => alert('Countdown finished!'),\n * });\n */\nfunction useCountdown({\n  countStart,\n  intervalMs = 1000,\n  onComplete,\n}: UseCountdownOptions): [number, UseCountdownReturn] {\n  const [count, setCount] = React.useState(countStart);\n  const [isActive, setIsActive] = React.useState(false);\n  const intervalRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  const startCountdown = React.useCallback(() => {\n    if (count > 0) {\n      setIsActive(true);\n    }\n  }, [count]);\n\n  const stopCountdown = React.useCallback(() => {\n    setIsActive(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, []);\n\n  const resetCountdown = React.useCallback(() => {\n    setIsActive(false);\n    setCount(countStart);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, [countStart]);\n\n  React.useEffect(() => {\n    if (isActive && count > 0) {\n      intervalRef.current = setInterval(() => {\n        setCount((prevCount) => {\n          if (prevCount <= 1) {\n            setIsActive(false);\n            onComplete?.();\n            return 0;\n          }\n          return prevCount - 1;\n        });\n      }, intervalMs);\n    } else if (!isActive && intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isActive, count, intervalMs, onComplete]);\n\n  return [count, { startCountdown, stopCountdown, resetCountdown, isActive }];\n}\n\nexport { useCountdown };\nexport type { UseCountdownOptions, UseCountdownReturn };\n",
      "path": "/../../packages/ui/src/hooks/unlogg-hooks/use-countdown.ts",
      "target": "/hooks/use-countdown.ts"
    }
  ]
}