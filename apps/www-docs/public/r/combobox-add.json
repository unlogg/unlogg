{
  "name": "combobox-add",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { availableColors, ColorOption } from \"@unlogg/ui/lib/available-colors\";\nimport { cn } from \"@unlogg/ui/lib/utils\";\n\ntype Status = {\n  value: string;\n  label: string;\n  color?: string; // color in hex format, e.g., \"#ff0000\"\n  description?: string; // optional description text\n};\n\nconst defaultStatuses: Status[] = [\n  {\n    value: \"backlog\",\n    label: \"Backlog\",\n    color: \"#ffcc00\",\n    description: \"Items waiting to be prioritized and planned\",\n  },\n  {\n    value: \"todo\",\n    label: \"Todo\",\n    color: \"#007bff\",\n    description: \"Ready to start and assigned to team members\",\n  },\n  {\n    value: \"in progress\",\n    label: \"In Progress\",\n    color: \"#ffc107\",\n    description: \"Currently being worked on\",\n  },\n  {\n    value: \"done\",\n    label: \"Done\",\n    color: \"#28a745\",\n    description: \"Completed and ready for review\",\n  },\n  {\n    value: \"canceled\",\n    label: \"Canceled\",\n    color: \"#dc3545\",\n    description: \"No longer needed or deprioritized\",\n  },\n];\n\ninterface ComboboxAddProps {\n  items?: Status[];\n  value?: Status | null;\n  onValueChange?: (value: Status | null) => void;\n  onAddItem?: (newItem: Status) => void;\n  placeholder?: string;\n  searchPlaceholder?: string;\n  className?: string;\n  color?: string;\n}\n\nfunction ComboboxAdd({\n  items = defaultStatuses,\n  value,\n  onValueChange,\n  onAddItem,\n  placeholder = \"+ Set status\",\n  searchPlaceholder = \"Change or add labels...\",\n  className = \"w-[150px]\",\n}: ComboboxAddProps) {\n  const [open, setOpen] = React.useState(false);\n  const [selectedStatus, setSelectedStatus] = React.useState<Status | null>(\n    value || null\n  );\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [showColorSelection, setShowColorSelection] = React.useState(false);\n  const [pendingNewItem, setPendingNewItem] = React.useState<string>(\"\");\n\n  // Ref for the color selection command component\n  const colorCommandRef = React.useRef<HTMLDivElement>(null);\n\n  // Use controlled value if provided, otherwise use internal state\n  const currentValue = value !== undefined ? value : selectedStatus;\n\n  const handleSelect = (selectedValue: string) => {\n    const newStatus =\n      items.find((item) => item.value === selectedValue) || null;\n\n    if (value === undefined) {\n      setSelectedStatus(newStatus);\n    }\n\n    onValueChange?.(newStatus);\n    setOpen(false);\n    setInputValue(\"\");\n  };\n\n  const handleAddNew = () => {\n    if (\n      inputValue.trim() &&\n      !items.find(\n        (item) =>\n          item.label.toLowerCase() === inputValue.toLowerCase() ||\n          item.value.toLowerCase() === inputValue.toLowerCase()\n      )\n    ) {\n      setPendingNewItem(inputValue.trim());\n      setShowColorSelection(true);\n      setInputValue(\"\"); // Clear input to prevent interference with color selection\n\n      // Focus the color selection command after state update\n      setTimeout(() => {\n        if (colorCommandRef.current) {\n          const firstItem =\n            colorCommandRef.current.querySelector(\"[cmdk-item]\");\n          if (firstItem instanceof HTMLElement) {\n            firstItem.focus();\n          }\n        }\n      }, 0);\n    }\n  };\n\n  const handleColorSelect = (colorOption?: ColorOption) => {\n    if (pendingNewItem) {\n      const newItem: Status = {\n        value: pendingNewItem.toLowerCase().replace(/\\s+/g, \"-\"),\n        label: pendingNewItem,\n        ...(colorOption && { color: colorOption.hex }),\n      };\n\n      onAddItem?.(newItem);\n\n      if (value === undefined) {\n        setSelectedStatus(newItem);\n      }\n\n      onValueChange?.(newItem);\n    }\n\n    // Reset states\n    setShowColorSelection(false);\n    setPendingNewItem(\"\");\n    setOpen(false);\n    setInputValue(\"\");\n  };\n\n  const handleCancelColorSelection = () => {\n    setShowColorSelection(false);\n    setPendingNewItem(\"\");\n    setOpen(false); // Close the popover when canceling\n  };\n\n  // Handle keyboard navigation for color selection\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (showColorSelection && event.key === \"Escape\") {\n      event.preventDefault();\n      event.stopPropagation();\n      handleCancelColorSelection();\n    }\n  };\n\n  // Handle popover open/close state\n  const handlePopoverOpenChange = (newOpen: boolean) => {\n    setOpen(newOpen);\n    // If closing while in color selection mode, reset the color selection state\n    if (!newOpen && showColorSelection) {\n      setShowColorSelection(false);\n      setPendingNewItem(\"\");\n    }\n  };\n\n  const filteredItems = items.filter(\n    (item) =>\n      item.label.toLowerCase().includes(inputValue.toLowerCase()) ||\n      item.value.toLowerCase().includes(inputValue.toLowerCase())\n  );\n\n  const showAddButton =\n    inputValue.trim() &&\n    filteredItems.length === 0 &&\n    !items.find(\n      (item) =>\n        item.label.toLowerCase() === inputValue.toLowerCase() ||\n        item.value.toLowerCase() === inputValue.toLowerCase()\n    );\n\n  return (\n    <div className=\"flex items-center space-x-4\">\n      <Popover open={open} onOpenChange={handlePopoverOpenChange}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outlineSecondary\"\n            className={cn(`justify-start ${className} `)}\n          >\n            {currentValue ? (\n              <div className=\"flex items-center gap-2\">\n                <div\n                  className=\"h-3 w-3 rounded-full border\"\n                  style={{ backgroundColor: currentValue.color }}\n                />\n                <div className=\"flex flex-col\">\n                  <span>{currentValue.label}</span>\n                </div>\n              </div>\n            ) : (\n              <>{placeholder}</>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent\n          className=\"p-0\"\n          side=\"right\"\n          align=\"start\"\n          onKeyDown={handleKeyDown}\n          onInteractOutside={(event) => {\n            // Allow closing when clicking outside, even during color selection\n            if (showColorSelection) {\n              setShowColorSelection(false);\n              setPendingNewItem(\"\");\n            }\n          }}\n        >\n          <Command shouldFilter={false}>\n            {!showColorSelection ? (\n              <>\n                <CommandInput\n                  placeholder={searchPlaceholder}\n                  value={inputValue}\n                  onValueChange={setInputValue}\n                />\n                <CommandList>\n                  {filteredItems.length === 0 && !showAddButton && (\n                    <CommandEmpty>No results found.</CommandEmpty>\n                  )}\n                  {filteredItems.length > 0 && (\n                    <CommandGroup>\n                      {filteredItems.map((status) => (\n                        <CommandItem\n                          key={status.value}\n                          value={status.value}\n                          onSelect={handleSelect}\n                        >\n                          <div className=\"flex items-start gap-2\">\n                            <div\n                              className=\"mt-1 h-3 w-3 flex-shrink-0 rounded-full border\"\n                              style={{ backgroundColor: status.color }}\n                            />\n                            <div className=\"flex flex-col\">\n                              <span>{status.label}</span>\n                              {status.description && (\n                                <span className=\"text-muted-foreground text-xs\">\n                                  {status.description}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  )}\n                  {showAddButton && (\n                    <CommandGroup>\n                      <CommandItem\n                        key=\"add-new\"\n                        onSelect={handleAddNew}\n                        className=\"text-primary\"\n                      >\n                        + Add \"{inputValue}\"\n                      </CommandItem>\n                    </CommandGroup>\n                  )}\n                </CommandList>\n              </>\n            ) : (\n              <div\n                role=\"dialog\"\n                aria-label={`Select color for ${pendingNewItem}`}\n                className=\"focus-within:outline-none\"\n              >\n                <div className=\"border-b p-3\">\n                  <p className=\"text-sm font-medium\">\n                    Select a color for \"{pendingNewItem}\"\n                  </p>\n                  <p className=\"text-muted-foreground text-xs\">\n                    Optional - you can skip this step\n                  </p>\n                </div>\n                <Command\n                  ref={colorCommandRef}\n                  shouldFilter={false}\n                  className=\"focus-within:outline-none\"\n                  defaultValue=\"skip-color\"\n                >\n                  <CommandList className=\"max-h-48 overflow-y-auto\">\n                    <CommandGroup>\n                      <CommandItem\n                        value=\"skip-color\"\n                        onSelect={() => handleColorSelect()}\n                        className=\"text-muted-foreground data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground\"\n                      >\n                        Skip - No color\n                      </CommandItem>\n                      {availableColors.map((colorOption, index) => (\n                        <CommandItem\n                          key={`${colorOption.hex}-${index}`}\n                          value={`color-${index}`}\n                          onSelect={() => handleColorSelect(colorOption)}\n                          className=\"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground flex items-center gap-2\"\n                        >\n                          <div\n                            className=\"h-4 w-4 rounded-full border border-gray-200\"\n                            style={{ backgroundColor: colorOption.hex }}\n                          />\n                          <div className=\"flex flex-col\">\n                            <span className=\"capitalize\">\n                              {colorOption.name}\n                            </span>\n                            <span className=\"text-muted-foreground text-xs\">\n                              {colorOption.hex}\n                            </span>\n                          </div>\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </CommandList>\n                </Command>\n                <div className=\"border-t p-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleCancelColorSelection}\n                    className=\"w-full\"\n                    onKeyDown={(e) => {\n                      if (e.key === \"Escape\") {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        handleCancelColorSelection();\n                      }\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            )}\n          </Command>\n        </PopoverContent>\n      </Popover>\n    </div>\n  );\n}\n\nexport default ComboboxAdd;\n",
      "path": "/../../packages/ui/src/components/unlogg-ui/combobox-add/combobox-add.tsx",
      "target": "/components/unlogg-ui/combobox-add.tsx"
    }
  ]
}